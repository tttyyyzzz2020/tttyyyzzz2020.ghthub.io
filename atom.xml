<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tttyyyzzz2020</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tttyyyzzz2020.ghthub.io/"/>
  <updated>2020-09-02T15:27:16.821Z</updated>
  <id>http://tttyyyzzz2020.ghthub.io/</id>
  
  <author>
    <name>yongzhan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUI中使用CoreData 示例</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/09/01/SwiftUI-CoreDataSimple/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/09/01/SwiftUI-CoreDataSimple/</id>
    <published>2020-09-01T08:24:49.000Z</published>
    <updated>2020-09-02T15:27:16.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文章主要学习使用CoreData 做一个简单的帖子，增删改查。。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关概念</span></span><br><span class="line"><span class="type">NSPersistentContainer</span>   <span class="comment">//容器</span></span><br><span class="line"><span class="type">NSManagedObjectContext</span>  <span class="comment">//管理上下文</span></span><br><span class="line"><span class="type">NSFetchRequest</span>          <span class="comment">//数据获取请求</span></span><br><span class="line">entity                 <span class="comment">//数据实例</span></span><br></pre></td></tr></table></figure><p><img src="coredata01.png" alt=""></p><h2 id="获取帖子并展示"><a href="#获取帖子并展示" class="headerlink" title="获取帖子并展示"></a>获取帖子并展示</h2><blockquote><p>主要步骤</p><ol><li>构建模型</li><li>创建数据管理类CoreDataManager</li><li>创建VM中间层对象</li><li>操作Sqlite3 生成假数据</li><li>视图获取并渲染</li></ol></blockquote><p>1.Post 实例数据模型, (添加帖子 entity 实例）<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: String</span><br><span class="line">body: String</span><br><span class="line">isPublished: Boolean      &#x2F;&#x2F;Default true</span><br></pre></td></tr></table></figure></p><blockquote><p>设置Post实例的 Codegen （码元） 为 class Definition （类定义）, 便于数据实例模型扩展</p></blockquote><p>2.创建CoreDataManager 数据管理类</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CoreData管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoreDataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">CoreDataManager</span>(moc: <span class="type">NSManagedObjectContext</span>.current)</span><br><span class="line">    <span class="keyword">var</span> moc: <span class="type">NSManagedObjectContext</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化上下文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>(moc: <span class="type">NSManagedObjectContext</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.moc = moc</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展<code>NSManagedObjectContext</code>获取应用的 context </p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展一个current属性，获取应用delegate生成的context上下文。</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSManagedObjectContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> current: <span class="type">NSManagedObjectContext</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span></span><br><span class="line">        <span class="keyword">return</span> appDelegate.persistentContainer.viewContext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加获取帖子方法, （创建<code>NSFetchRequest</code>请求，并调用）</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取帖子</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAllPosts</span><span class="params">()</span></span> -&gt; [<span class="type">Post</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> posts = [<span class="type">Post</span>]()</span><br><span class="line">    <span class="keyword">let</span> request: <span class="type">NSFetchRequest</span>&lt;<span class="type">Post</span>&gt; = <span class="type">Post</span>.fetchRequest()</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        posts = <span class="keyword">try</span> <span class="keyword">self</span>.moc.fetch(request)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> posts</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建ViewModle层, 响应视图数据渲染</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostList 响应数据列表模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostListViewModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> posts = [<span class="type">PostViewModel</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchAllPosts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 异步获取数据</span></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">self</span>.posts = <span class="type">CoreDataManager</span>.shared.getAllPosts().<span class="built_in">map</span>(<span class="type">PostViewModel</span>.<span class="keyword">init</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Post模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> post: <span class="type">Post</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(post: <span class="type">Post</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.post = post</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.post.title ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.post.body ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> published: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.post.isPublished</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.进入CoreData 数据库，查看数据</p><blockquote><p>查看数CoreData 数据库地址 print(storeDescription.url)</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Optional</span>(file:<span class="comment">///Users/yongzhan/Library/Developer/CoreSimulator/Devices/D1150C48-CFF1-4B43-9752-728B1C807884/data/Containers/Data/Application/D00CA085-01FB-4F52-9100-5038BB062BDF/Library/Application%20Support/CoreDataSimple.sqlite)</span></span><br></pre></td></tr></table></figure><blockquote><p>sqlit3操作查看数据, 并插入几条模拟数据</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入数据库 </span></span><br><span class="line">sqlite3 <span class="type">CoreDataSimple</span>.sqlite</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看数据表</span></span><br><span class="line">.tables</span><br><span class="line"><span class="comment">// ZPOST         Z_METADATA    Z_MODELCACHE  Z_PRIMARYKEY</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看表结构</span></span><br><span class="line">.schema <span class="type">ZPOST</span></span><br><span class="line"><span class="comment">// CREATE TABLE ZPOST ( Z_PK INTEGER PRIMARY KEY, Z_ENT INTEGER, Z_OPT INTEGER, ZISPUBLISHED INTEGER, ZBODY VARCHAR, ZTITLE VARCHAR );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="type">INSERT</span> <span class="type">INTO</span> <span class="type">ZPOST</span>(<span class="type">ZTITLE</span>,<span class="type">ZBODY</span>) <span class="type">VALUES</span> ('<span class="type">Hello</span> <span class="type">Core</span> <span class="type">Data'</span>,'<span class="type">Body'</span>);</span><br><span class="line"><span class="type">INSERT</span> <span class="type">INTO</span> <span class="type">ZPOST</span>(<span class="type">ZTITLE</span>,<span class="type">ZBODY</span>,<span class="type">ZISPUBLISHED</span>) <span class="type">VALUES</span> ('<span class="type">Hello</span> <span class="type">Core</span> <span class="type">Data'</span>,'<span class="type">Body'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="type">SELECT</span> * <span class="type">FROM</span> <span class="type">ZPOST</span>;</span><br><span class="line"><span class="comment">// 1||||Body|Hello Core Data</span></span><br></pre></td></tr></table></figure><p>5.在 view 视图获取并展现帖子数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// posts</span></span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> listVM = <span class="type">PostListViewModel</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>&#123;</span><br><span class="line">            <span class="type">List</span>(listVM.posts, id: \.title)&#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"\(item.title)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .onAppear&#123;</span><br><span class="line">                <span class="keyword">self</span>.listVM.fetchAllPosts()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加新帖子"><a href="#添加新帖子" class="headerlink" title="添加新帖子"></a>添加新帖子</h2><blockquote><p>主要步骤</p><ol><li>创建添加帖子的视图</li><li>构建添加帖子的VM模型， 连接视图逻辑，和保存CoreData数据</li><li>在CoreData中添加保存持久化</li></ol></blockquote><p>1.创建添加的视图，AddPostView</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AddPostView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 控制弹窗</span></span><br><span class="line">    @<span class="type">Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationModel</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新帖子的模型</span></span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">private</span> <span class="keyword">var</span> addPostVM = <span class="type">AddPostViewModel</span>()</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>&#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Title"</span>, text: $addPostVM.postTitle)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Body"</span>, text: $addPostVM.postBody)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Save"</span>) &#123;</span><br><span class="line">                <span class="comment">// 保存成功关闭弹窗</span></span><br><span class="line">                <span class="keyword">let</span> saved = <span class="keyword">self</span>.addPostVM.savePost()</span><br><span class="line">                <span class="keyword">if</span> saved &#123;</span><br><span class="line">                    <span class="keyword">self</span>.presentationModel.wrappedValue.dismiss()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加view+extension包裹contentView，并在contentView添加sheet弹出添加帖子页面。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展一个embedInNavigationView方法，方便制作弹窗</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">embedInNavigationView</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123; <span class="keyword">self</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加控制sheet弹窗的变量（控制添加帖子弹窗视图）</span></span><br><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> isPresented: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写contentView</span></span><br><span class="line"><span class="type">VStack</span>&#123;</span><br><span class="line">    <span class="type">List</span>(listVM.posts, id: \.title)&#123; item <span class="keyword">in</span></span><br><span class="line">       <span class="comment">//省略。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">    .sheet(isPresented: $isPresented, onDismiss: &#123;</span><br><span class="line">            </span><br><span class="line">    &#125;) &#123;</span><br><span class="line">        <span class="type">AddPostView</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.navigationBarTitle(<span class="string">"Posts"</span>)</span><br><span class="line">.navigationBarItems(trailing: <span class="type">Button</span>(<span class="string">"AddPost"</span> )&#123;</span><br><span class="line">    <span class="keyword">self</span>.isPresented = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">    .embedInNavigationView()</span><br></pre></td></tr></table></figure><p>2.创建AddPostViewModel</p><blockquote><p>视图层调用vm层的<code>savePost</code>方法，该方法操作 <code>CoreDataManager</code> 保存数据持久化。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPostViewModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// field</span></span><br><span class="line">    <span class="keyword">var</span> postTitle: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> postBody: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// new post</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> post: <span class="type">Post</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> post = <span class="type">Post</span>(context: <span class="type">CoreDataManager</span>.shared.moc)</span><br><span class="line">        post.postId = <span class="type">UUID</span>()</span><br><span class="line">        post.title = postTitle</span><br><span class="line">        post.body = postBody</span><br><span class="line">        <span class="keyword">return</span> post</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// save post to coreData</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">savePost</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">CoreDataManager</span>.shared.savePost(post: post)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.CoreDataManager 中保存帖子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在coreDataManager 中添加保存帖子</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">savePost</span><span class="params">(post: Post)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.moc.insert(post)</span><br><span class="line">    <span class="keyword">try</span> save()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="keyword">self</span>.moc.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文章主要学习使用CoreData 做一个简单的帖子，增删改查。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>static和class关键字定义静态方法和属性</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/30/SwiftUI-Static_Class/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/30/SwiftUI-Static_Class/</id>
    <published>2020-08-30T10:50:51.000Z</published>
    <updated>2020-08-30T13:15:14.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="static-和-class-关键字"><a href="#static-和-class-关键字" class="headerlink" title="static 和 class 关键字"></a>static 和 class 关键字</h1><blockquote><p>static 和 class关键字，都可以用来修饰方法和属性。表示类或结构体的静态方法，属性。</p></blockquote><h2 id="static-关键字修饰struct和enum"><a href="#static-关键字修饰struct和enum" class="headerlink" title="static 关键字修饰struct和enum"></a>static 关键字修饰struct和enum</h2><blockquote><p>两者使用类是，可以修饰 存储属性， 计算属性，方法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> zero = <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> ones: [<span class="type">Point</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="type">Point</span>(x: <span class="number">1</span>, y: <span class="number">1</span>),</span><br><span class="line">                <span class="type">Point</span>(x: -<span class="number">1</span>, y: <span class="number">1</span>),</span><br><span class="line">                <span class="type">Point</span>(x: <span class="number">1</span>, y: -<span class="number">1</span>),</span><br><span class="line">                <span class="type">Point</span>(x: -<span class="number">1</span>, y: -<span class="number">1</span>)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(p1: Point, p2: Point)</span></span> -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Point</span>(x: p1.x + p2.x, y: p1.y + p2.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Point</span>.zero</span><br><span class="line"><span class="type">Point</span>.ones</span><br><span class="line"><span class="type">Point</span>.add( <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>),  <span class="type">Point</span>(x: <span class="number">1</span>, y: <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="class-关键字修饰类"><a href="#class-关键字修饰类" class="headerlink" title="class 关键字修饰类"></a>class 关键字修饰类</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储属性，必须用static 不能用class</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> attr: <span class="type">String?</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">names</span>: [<span class="title">String</span>] </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"Jokie"</span>,</span><br><span class="line">                <span class="string">"Admon"</span>,</span><br><span class="line">                <span class="string">"Peoter"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在 class 中可以使用 class</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">foo</span>() -&gt; <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyClass.foo()"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以使用 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyClass.bar()"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MyClass</span>.names</span><br><span class="line"><span class="type">MyClass</span>.foo()</span><br><span class="line"><span class="type">MyClass</span>.bar()</span><br></pre></td></tr></table></figure><h2 id="protocol-中用什么关键字约束子类？"><a href="#protocol-中用什么关键字约束子类？" class="headerlink" title="protocol 中用什么关键字约束子类？"></a>protocol 中用什么关键字约束子类？</h2><blockquote><p>结论是protocol中统一使用static就OK了</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyStruct"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyEnum"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 class 中可以使用 class</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">foo</span>() -&gt; <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyClass.foo()"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以使用 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyClass.bar()"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;static-和-class-关键字&quot;&gt;&lt;a href=&quot;#static-和-class-关键字&quot; class=&quot;headerlink&quot; title=&quot;static 和 class 关键字&quot;&gt;&lt;/a&gt;static 和 class 关键字&lt;/h1&gt;&lt;blockquo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>typealias类型别名和associatedtype类型占位</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/30/SwiftUI-typealias_associatedtype/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/30/SwiftUI-typealias_associatedtype/</id>
    <published>2020-08-30T07:50:51.000Z</published>
    <updated>2020-08-30T12:30:28.420Z</updated>
    
    <content type="html"><![CDATA[<p>学习typealias和associatedtype 类型占位</p><h1 id="typealias-类型别名"><a href="#typealias-类型别名" class="headerlink" title="typealias 类型别名"></a>typealias 类型别名</h1><blockquote><p>typealias 用来给已经存在的类型从新定义名字</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Location</span> = <span class="type">CGPoint</span>    <span class="comment">//如将CGPint 取别名Location</span></span><br></pre></td></tr></table></figure><h4 id="使用-typealias-更好的阅读性"><a href="#使用-typealias-更好的阅读性" class="headerlink" title="使用 typealias 更好的阅读性"></a>使用 typealias 更好的阅读性</h4><blockquote><p>原代码，两点差值距离</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distance</span><span class="params">(from point: CGPoint, to anotherPoint: CGPoint)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dx = <span class="type">Double</span>(anotherPoint.x - point.x)</span><br><span class="line">    <span class="keyword">let</span> dy = <span class="type">Double</span>(anotherPoint.y - point.y)</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> origin: <span class="type">CGPoint</span> = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> point: <span class="type">CGPoint</span> = <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d: <span class="type">Double</span> =  <span class="built_in">distance</span>(from: origin, to: point)</span><br></pre></td></tr></table></figure><blockquote><p>取别名后，有了更好的阅读性</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Location</span> = <span class="type">CGPoint</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Distance</span> = <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distance</span><span class="params">(from location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">    to anotherLocation: Location)</span></span> -&gt; <span class="type">Distance</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dx = <span class="type">Distance</span>(location.x - anotherLocation.x)</span><br><span class="line">        <span class="keyword">let</span> dy = <span class="type">Distance</span>(location.y - anotherLocation.y)</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx * dx + dy * dy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> origin: <span class="type">Location</span> = <span class="type">Location</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> point: <span class="type">Location</span> = <span class="type">Location</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d: <span class="type">Distance</span> = <span class="built_in">distance</span>(from: origin, to: point)</span><br></pre></td></tr></table></figure><h4 id="在typealias-别名中引入泛型"><a href="#在typealias-别名中引入泛型" class="headerlink" title="在typealias 别名中引入泛型"></a>在typealias 别名中引入泛型</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Worker</span>&lt;<span class="type">T</span>&gt; = <span class="type">Person</span>&lt;<span class="type">T</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="使用别名遵循多个协议"><a href="#使用别名遵循多个协议" class="headerlink" title="使用别名遵循多个协议"></a>使用别名遵循多个协议</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Cat</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Dog</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Pat</span> = <span class="type">Cat</span> &amp; <span class="type">Dog</span></span><br></pre></td></tr></table></figure><blockquote><p>不知codeable 有类同用法，记得不太清楚。。。</p></blockquote><h1 id="associatedtype-类型占位"><a href="#associatedtype-类型占位" class="headerlink" title="associatedtype 类型占位"></a>associatedtype 类型占位</h1><blockquote><p>目标使得Tiger类只能吃Meat类食物</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Food</span></span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Meat</span>:<span class="title">Food</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Grass</span>: <span class="title">Food</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tiger</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">( <span class="number">_</span> food: Food)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> meta = food <span class="keyword">as</span>? meat &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"eat \(food)"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"Tiger can only eat meat!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处使用了as?转义Food类显得多余，更好的处理是给Animal定义一个类型占位， 代码如下</p><h4 id="使用-associatedtype-预先占位类型，配合typealias动态分配类型"><a href="#使用-associatedtype-预先占位类型，配合typealias动态分配类型" class="headerlink" title="使用 associatedtype 预先占位类型，配合typealias动态分配类型"></a>使用 associatedtype 预先占位类型，配合typealias动态分配类型</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Food</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Meat</span>:<span class="title">Food</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Grass</span>: <span class="title">Food</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">F</span>: <span class="type">Food</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: F )</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tiger</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">F</span> = <span class="type">Meat</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: Meat)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"eat \(food)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sheep</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">(<span class="number">_</span> food: Grass)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"eat \(food)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>associatedtype 预先定义了一个类型占位，子类可以在自身再从新分配想要的类型，比如给老虎定义了Meat类， 我们不再需要那多余的转义了。</p></blockquote><blockquote></blockquote><h4 id="使用associatedtype-后注意事项⚠️"><a href="#使用associatedtype-后注意事项⚠️" class="headerlink" title="使用associatedtype 后注意事项⚠️"></a>使用associatedtype 后注意事项⚠️</h4><blockquote><p>使用associatedtype 后Animal协议将不能独立使用了。因为他有一个不确定的类型，所以如下代码将不能通过编译。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span><span class="params">(animal: Animal)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上方无法编译</span></span><br></pre></td></tr></table></figure><blockquote><p>需要改写车给泛型约束，（这块还不是太懂，强行理解😂）</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDangerous</span>&lt;T: Animal&gt;<span class="params">(animal: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="type">Tiger</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isDangerous(animal: <span class="type">Tiger</span>()) <span class="comment">// true</span></span><br><span class="line">isDangerous(animal: <span class="type">Sheep</span>()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习typealias和associatedtype 类型占位&lt;/p&gt;
&lt;h1 id=&quot;typealias-类型别名&quot;&gt;&lt;a href=&quot;#typealias-类型别名&quot; class=&quot;headerlink&quot; title=&quot;typealias 类型别名&quot;&gt;&lt;/a&gt;typea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AnyClass 元类型和 .self</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/27/SwiftUI-Any_AnyClass/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/27/SwiftUI-Any_AnyClass/</id>
    <published>2020-08-27T04:25:56.000Z</published>
    <updated>2020-08-31T15:02:05.532Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Any-和-AnyObject"><a href="#Any-和-AnyObject" class="headerlink" title="Any 和 AnyObject"></a>Any 和 AnyObject</h4><blockquote><p>Any任意类型，AnyObject 任意对象</p></blockquote><h1 id="AnyClass-任意类型的别名"><a href="#AnyClass-任意类型的别名" class="headerlink" title="AnyClass 任意类型的别名"></a>AnyClass 任意类型的别名</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">AnyClass</span> = <span class="type">AnyObject</span>.<span class="type">Type</span></span><br></pre></td></tr></table></figure><blockquote><p>AnyObject.Type 得到的是（Meta）元类型。也就是类型的类型<br>比如A.Type代表A类型的类型，有点点饶😂</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">method</span>() </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Hello"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> typeA: <span class="type">A</span>.<span class="type">Type</span> = <span class="type">A</span>.<span class="keyword">self</span>       <span class="comment">//A.Type 规范类型， A.self取得类型本身赋值</span></span><br><span class="line">typeA.method()                   <span class="comment">//调用类方法</span></span><br></pre></td></tr></table></figure><blockquote><p>类.self 获得类型本身</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span>.<span class="type">Type</span>  <span class="comment">//A类型</span></span><br><span class="line"><span class="type">A</span>.<span class="keyword">self</span>  <span class="comment">//获得A的类型， 获取必须用A.self</span></span><br></pre></td></tr></table></figure><h1 id="使用-AnyClass-场景"><a href="#使用-AnyClass-场景" class="headerlink" title="使用 AnyClass 场景"></a>使用 AnyClass 场景</h1><blockquote><p>A.self取得类本身，赋值为AnyClass类型。 调用时转为A.Type类型，才能使用method()方法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyClass: <span class="type">AnyClass</span> = <span class="type">A</span>.<span class="keyword">self</span></span><br><span class="line">(anyClass <span class="keyword">as</span>! <span class="type">A</span>.<span class="type">Type</span>).method()</span><br></pre></td></tr></table></figure><blockquote><p>好像使用了AnyClass以后代码代码，调用更麻烦了。<br>但这种使用方式在，编写框架和元编程概念中更为常见可，它可以解偶代码，使得你不需要不关心实际的类。看下方的例子</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> usingVCTypes: [<span class="type">AnyClass</span>] = [<span class="type">MusicViewController</span>.<span class="keyword">self</span>,</span><br><span class="line">    <span class="type">AlbumViewController</span>.<span class="keyword">self</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupViewControllers</span><span class="params">(<span class="number">_</span> vcTypes: [AnyClass])</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> vcType <span class="keyword">in</span> vcTypes &#123;</span><br><span class="line">        <span class="keyword">if</span> vcType <span class="keyword">is</span> <span class="type">UIViewController</span>.<span class="type">Type</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> vc = (vcType <span class="keyword">as</span>! <span class="type">UIViewController</span>.<span class="type">Type</span>).<span class="keyword">init</span>()</span><br><span class="line">            <span class="built_in">print</span>(vc)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setupViewControllers(usingVCTypes)</span><br></pre></td></tr></table></figure><blockquote><p>用了AnyClass和.self以后，可以实现统一的初始化。</p></blockquote><h4 id="UIKit中的UITableViewCell注册"><a href="#UIKit中的UITableViewCell注册" class="headerlink" title="UIKit中的UITableViewCell注册"></a>UIKit中的UITableViewCell注册</h4><blockquote><p>.self的使用，也是一个例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.tableView.registerClass(</span><br><span class="line">    UITableViewCell.self, forCellReuseIdentifier: &quot;myCell&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Any-和-AnyObject&quot;&gt;&lt;a href=&quot;#Any-和-AnyObject&quot; class=&quot;headerlink&quot; title=&quot;Any 和 AnyObject&quot;&gt;&lt;/a&gt;Any 和 AnyObject&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Any任意
      
    
    </summary>
    
    
      <category term="编程" scheme="http://tttyyyzzz2020.ghthub.io/categories/categories/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 protocol extension 协议扩展实例类型的默认实现</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/24/SwiftUI-ProtocolExtension/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/24/SwiftUI-ProtocolExtension/</id>
    <published>2020-08-24T05:02:50.000Z</published>
    <updated>2020-08-31T14:54:28.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>protocol 用来规范一些实际的类，如struct, enum class 等必须要实现的方法</p></blockquote><h2 id="extension-扩展protocol协议（提供默认实现）"><a href="#extension-扩展protocol协议（提供默认实现）" class="headerlink" title="extension 扩展protocol协议（提供默认实现）"></a>extension 扩展protocol协议（提供默认实现）</h2><blockquote><p>需求场景案例： 数组，集合，字典，等都需要有map 等遍历方法。 当没有extension扩展协议时，需要在协议中定义接口，然后在各个实际类中实现<br>有了协议扩展，我们可以在extension中创建一个默认实现。代码只需要写一次了。<br> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 协议方法</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展协议</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果用extension 扩展了protocol方法，该方法默认会被实际的类继承。作为默认的实现</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MyStruct</span>().method()</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Called in extension</span></span><br></pre></td></tr></table></figure><blockquote><p>如果结构体，有了自身的实现，则会覆盖extension中的实现</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Called in struct"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MyStruct</span>().method()</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Called in struct</span></span><br></pre></td></tr></table></figure><h2 id="调用方法分析：案例1"><a href="#调用方法分析：案例1" class="headerlink" title="调用方法分析：案例1"></a>调用方法分析：案例1</h2><blockquote><p>没有扩展方法时，只有实际类一中实现。此时无论实例变量，是何种类型调用的方法都是同一个。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">A1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B1</span>: <span class="title">A1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = <span class="type">B1</span>() <span class="comment">// b1 is B1</span></span><br><span class="line">b1.method1()</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1: <span class="type">A1</span> = <span class="type">B1</span>()</span><br><span class="line"><span class="comment">// a1 is A1</span></span><br><span class="line">a1.method1()</span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h2 id="调用方法分析：-案例2"><a href="#调用方法分析：-案例2" class="headerlink" title="调用方法分析： 案例2"></a>调用方法分析： 案例2</h2><blockquote><p>协议中扩展了默认的实现，实际类也有自身的实现。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">A2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">A2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B2</span>: <span class="title">A2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实例变量首先会根据类型的推断，调用自身的方法。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b2 = <span class="type">B2</span>()</span><br><span class="line"></span><br><span class="line">b2.method1() <span class="comment">// hello</span></span><br><span class="line">b2.method2() <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><blockquote><p>当将实际类型转为，协议类型后，则会调用协议中的方法中的实现，（优先找协议规定中，自身的实现，其次寻找extension扩展的默认实现）。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = b2 <span class="keyword">as</span> <span class="type">A2</span></span><br><span class="line"></span><br><span class="line">a2.method1() <span class="comment">// hello</span></span><br><span class="line">a2.method2() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>如果类型推断得到的是实际的类型<br>    * 那么类型中的实现将被调用；<br>    * 如果类型中没有实现的话，那么协议扩展中的默认实现将被使用</p></blockquote><blockquote><p>如果类型推断得到的是协议，而不是实际类型<br>    * 并且方法在协议中进行了定义，那么类型中的实现将被调用；<br>    * 如果类型中没有实现，那么协议扩展中的默认实现被使用<br>    * 否则 (也就是方法没有在协议中定义)，扩展中的默认实现将被调用</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;protocol 用来规范一些实际的类，如struct, enum class 等必须要实现的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;extension-扩展protocol协议（提供默认实现）&quot;&gt;&lt;a href=&quot;#extens
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用 Codable 协议编码解码json数据</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/23/SwiftUI-JSONDecoder/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/23/SwiftUI-JSONDecoder/</id>
    <published>2020-08-23T05:02:50.000Z</published>
    <updated>2020-08-31T14:54:28.172Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"menu"</span>: &#123;</span><br><span class="line"><span class="string">"id"</span>: <span class="string">"file"</span>,</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"File"</span>,</span><br><span class="line"><span class="string">"popup"</span>: &#123;</span><br><span class="line"><span class="string">"menuitem"</span>: [&#123;</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"New"</span>,</span><br><span class="line"><span class="string">"onclick"</span>: <span class="string">"CreateNewDoc()"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"Open"</span>,</span><br><span class="line"><span class="string">"onclick"</span>: <span class="string">"OpenDoc()"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"value"</span>: <span class="string">"Close"</span>,</span><br><span class="line"><span class="string">"onclick"</span>: <span class="string">"CloseDoc()"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Codable-协议"><a href="#Codable-协议" class="headerlink" title="Codable 协议"></a>Codable 协议</h2><blockquote><p>当结构体实习了Codeable协议，则可以使用JSONDecoder, JSONEncoder 进行编码和解码。<br>String，Int，Double，Date 或者 URL 这样的类型是默认就实现了 Codable 的</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> menu: <span class="type">Menu</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Menu</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> popup: <span class="type">Popup</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Popup</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> menuItem: [<span class="type">MenuItem</span>]</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">            <span class="keyword">case</span> menuItem = <span class="string">"menuitem"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MenuItem</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> onClick: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">            <span class="keyword">case</span> value</span><br><span class="line">            <span class="keyword">case</span> onClick = <span class="string">"onclick"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果 JSON 中的 key 和类型中的变量名不一致的话,则需要自行转化。</p></blockquote><h2 id="使用-CodingKeys-转换json数据的编码的key值"><a href="#使用-CodingKeys-转换json数据的编码的key值" class="headerlink" title="使用 CodingKeys 转换json数据的编码的key值"></a>使用 CodingKeys 转换json数据的编码的key值</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> value</span><br><span class="line">    <span class="keyword">case</span> onClick = <span class="string">"onclick"</span>     <span class="comment">//将onclick 转为onClick</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用JSONDecoder-解码json数据"><a href="#使用JSONDecoder-解码json数据" class="headerlink" title="使用JSONDecoder 解码json数据"></a>使用JSONDecoder 解码json数据</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = jsonString.data(using: .utf8)!</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Obj</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">    <span class="keyword">let</span> value = obj.menu.popup.menuItem[<span class="number">0</span>].value</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"出错啦：\(error)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Combine数据状态管理基础</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/19/SwiftUI-StateManager/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/19/SwiftUI-StateManager/</id>
    <published>2020-08-19T10:51:20.000Z</published>
    <updated>2020-08-30T02:56:47.941Z</updated>
    
    <content type="html"><![CDATA[<p>学习combine 数据管理，需要先学习属性包装@PropertyWrapper</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span>              页面状态数据</span><br><span class="line">@<span class="type">Binding</span>            页面数据双向绑定</span><br><span class="line">@<span class="type">ObservedObject</span>    共享数据对象   （引用）</span><br><span class="line">@<span class="type">StateObject</span>       共享数据对象   （创建）</span><br><span class="line">@<span class="type">EnvironmentObject</span>   全局数据对象</span><br><span class="line">@<span class="type">Environment</span>         系统数据</span><br></pre></td></tr></table></figure><h2 id="数据响应和绑定"><a href="#数据响应和绑定" class="headerlink" title="数据响应和绑定"></a>数据响应和绑定</h2><blockquote><p>@State 修饰符 将数据转为响应式的状态，数据的跟新可驱动视图的变化</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SignupView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler: (<span class="type">User</span>) -&gt; <span class="type">Void</span></span><br><span class="line">    </span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> username = <span class="string">""</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Binding 修饰符 数据进行双向绑定, 子视图不用拥有数据本省，可接受父视图传递共享</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileEditingView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Username"</span>, text: $user.username)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Email"</span>, text: $user.email)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个页面数据共享怎么处理？"><a href="#多个页面数据共享怎么处理？" class="headerlink" title="多个页面数据共享怎么处理？"></a>多个页面数据共享怎么处理？</h2><blockquote><p>使用 <code>ObservableObject</code> 和 <code>@ObservedObject</code> 可创建一个可观测的数据模型，并在多个页面共享数据实例</p></blockquote><p>创建数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelController</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> userController: <span class="type">UserModelController</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>@ObservedObject</code>, 会在同一页面共享数据实例，如果不想如此，也可以使用<code>@StateObject</code>修饰，使得视图能单独拥有一个数据实例</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> userController = <span class="type">UserModelController</span>.load()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局数据对象注入获取"><a href="#全局数据对象注入获取" class="headerlink" title="全局数据对象注入获取"></a>全局数据对象注入获取</h2><p>创建数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThemeEnvironmentKey</span>: <span class="title">EnvironmentKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultValue = <span class="type">Theme</span>.<span class="keyword">default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnvironmentValues</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> theme: <span class="type">Theme</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">self</span>[<span class="type">ThemeEnvironmentKey</span>.<span class="keyword">self</span>] &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">self</span>[<span class="type">ThemeEnvironmentKey</span>.<span class="keyword">self</span>] = newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式一： 直接获取</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArticleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    <span class="keyword">var</span> article: <span class="type">Article</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">Text</span>(article.title)</span><br><span class="line">                .foregroundColor(theme.titleTextColor)</span><br><span class="line">            <span class="type">Text</span>(article.body)</span><br><span class="line">                .foregroundColor(theme.bodyTextColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式2: 父级视图注入</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> articleLibrary: <span class="type">ArticleLibrary</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ArticleListView</span>(articles: articleLibrary.articles)</span><br><span class="line">            .environmentObject(theme)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArticleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.theme) <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    <span class="keyword">var</span> article: <span class="type">Article</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">Text</span>(article.title)</span><br><span class="line">                .foregroundColor(theme.titleTextColor)</span><br><span class="line">            <span class="type">Text</span>(article.body)</span><br><span class="line">                .foregroundColor(theme.bodyTextColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习combine 数据管理，需要先学习属性包装@PropertyWrapper&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SwiftUI基础组件用法</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/17/SwiftUI-BaseComponentUse/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/17/SwiftUI-BaseComponentUse/</id>
    <published>2020-08-17T03:56:39.000Z</published>
    <updated>2020-08-30T02:53:36.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SwiftUI基础组件用法"><a href="#SwiftUI基础组件用法" class="headerlink" title="SwiftUI基础组件用法"></a>SwiftUI基础组件用法</h2><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"Hello World"</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">Text</span>(<span class="string">"Hello, \(Image(systemName: "</span>globe<span class="string">"))!"</span>).font(<span class="type">Font</span>.title.weight(.bold))</span><br></pre></td></tr></table></figure><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Label</span>(<span class="string">"Swift"</span>, image: <span class="string">"swift"</span>)</span><br><span class="line"><span class="type">Label</span>(<span class="string">"Website"</span>, systemImage: <span class="string">"globe"</span>)</span><br></pre></td></tr></table></figure><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"John"</span>    </span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">"Name's placeholder"</span>, text: $name)</span><br><span class="line">        .textFieldStyle(<span class="type">RoundedBorderTextFieldStyle</span>())</span><br><span class="line">        .padding()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TextEditor"><a href="#TextEditor" class="headerlink" title="TextEditor"></a>TextEditor</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> fullText: <span class="type">String</span> = <span class="string">"This is some editable text..."</span></span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TextEditor</span>(text: $fullText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SecureField"><a href="#SecureField" class="headerlink" title="SecureField"></a>SecureField</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> password: <span class="type">String</span> = <span class="string">"1234"</span>    </span><br><span class="line"><span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">SecureField</span>($password)</span><br><span class="line">        .textFieldStyle(<span class="type">RoundedBorderTextFieldStyle</span>())</span><br><span class="line">        .padding()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(</span><br><span class="line">    action: &#123;</span><br><span class="line">        <span class="comment">// did tap</span></span><br><span class="line">    &#125;,</span><br><span class="line">    label: &#123; <span class="type">Text</span>(<span class="string">"Click Me"</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Link</span>(<span class="string">"View Our Terms of Service"</span>, destination: <span class="type">URL</span>(string: <span class="string">"https://www.example.com/TOS.html"</span>)!)</span><br></pre></td></tr></table></figure><h3 id="NavigationLink"><a href="#NavigationLink" class="headerlink" title="NavigationLink"></a>NavigationLink</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">NavigationLink</span>(destination: <span class="type">DetailView</span>()) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Push"</span>)</span><br><span class="line">    &#125;.navigationBarTitle(<span class="type">Text</span>(<span class="string">"Master"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ToolbarItem"><a href="#ToolbarItem" class="headerlink" title="ToolbarItem"></a>ToolbarItem</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"SwiftUI"</span>).padding()</span><br><span class="line">        .toolbar &#123;</span><br><span class="line">            <span class="type">ToolbarItem</span>(placement: .principal) &#123;</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"Title"</span>)</span><br><span class="line">                    <span class="type">Button</span>(<span class="string">"Clickable Subtitle"</span>) &#123; <span class="built_in">print</span>(<span class="string">"principle"</span>) &#125;                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> isShowing = <span class="literal">true</span> <span class="comment">// toggle state</span></span><br><span class="line"></span><br><span class="line"><span class="type">Toggle</span>(isOn: $isShowing) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">Picker</span>(selection: $selection, label:</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Picker Name"</span>)</span><br><span class="line">                , content: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"Value 1"</span>).tag(<span class="number">0</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"Value 2"</span>).tag(<span class="number">1</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"Value 3"</span>).tag(<span class="number">2</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">"Value 4"</span>).tag(<span class="number">3</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> selectedDate = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateClosedRange: <span class="type">ClosedRange</span>&lt;<span class="type">Date</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">min</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: -<span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">max</span> = <span class="type">Calendar</span>.current.date(byAdding: .day, value: <span class="number">1</span>, to: <span class="type">Date</span>())!</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>...<span class="built_in">max</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Form</span> &#123;</span><br><span class="line">        <span class="type">Section</span> &#123;</span><br><span class="line">            <span class="type">DatePicker</span>(</span><br><span class="line">                selection: $selectedDate,</span><br><span class="line">                <span class="keyword">in</span>: dateClosedRange,</span><br><span class="line">                displayedComponents: .date,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">"Due Date"</span>) &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProgressView"><a href="#ProgressView" class="headerlink" title="ProgressView"></a>ProgressView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> progress = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">ProgressView</span>(value: progress)</span><br><span class="line">    <span class="type">Button</span>(<span class="string">"More"</span>, action: &#123; progress += <span class="number">0.05</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> progress: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="type">Slider</span>(value: $progress, from: <span class="number">0.0</span>, through: <span class="number">100.0</span>, by: <span class="number">5.0</span>)  <span class="type">Button</span>(<span class="string">"More"</span>, action: &#123; progress += <span class="number">0.05</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">State</span> <span class="keyword">var</span> quantity: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"><span class="type">Stepper</span>(value: $quantity, <span class="keyword">in</span>: <span class="number">0</span>...<span class="number">10</span>, label: &#123; <span class="type">Text</span>(<span class="string">"Quantity \(quantity)"</span>)&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SwiftUI基础组件用法&quot;&gt;&lt;a href=&quot;#SwiftUI基础组件用法&quot; class=&quot;headerlink&quot; title=&quot;SwiftUI基础组件用法&quot;&gt;&lt;/a&gt;SwiftUI基础组件用法&lt;/h2&gt;&lt;h3 id=&quot;Text&quot;&gt;&lt;a href=&quot;#Text&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何创建Widget小物件</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/14/SwiftUI-Widget/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/14/SwiftUI-Widget/</id>
    <published>2020-08-14T10:06:37.000Z</published>
    <updated>2020-08-30T02:55:27.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="widget-范例创建步骤"><a href="#widget-范例创建步骤" class="headerlink" title="widget 范例创建步骤"></a>widget 范例创建步骤</h3><ol><li>添加target widget工程</li><li>创建shared文件夹共享数据（模型，视图，api等）设置membership</li><li>了解widgit配置结构（configuration，provider，snashot，timeline, viewContent）</li><li>创建Timeline Entry 实例，准备要观测数据</li><li>创建Timeline Provider 服务，api获取数据，实现snapshot, timeline方法</li><li>创建 Widget要展现的view视图, 适配不同尺寸(systemSmall, systemMedium, systemlarge)的widget</li><li>在入口处统一配置</li></ol><h3 id="Widget包含哪些内容："><a href="#Widget包含哪些内容：" class="headerlink" title="Widget包含哪些内容："></a>Widget包含哪些内容：</h3><blockquote><ul><li>要创建一个 Widget 小物件，主要通过配置对象StaticConfiguration 完成</li><li>该对象有两个重要的参数Provider  和 Content</li><li>Provider主要用于管理小物件的实时状态数据。Content是展示的视图view</li><li>Provider中需要实现2个非常重要的方法snapshot和timeline， 他们是小物件的快照，和时间线变化配置</li><li>Provider的还需要配置widget的数据 Timeline Entry</li><li>在所有对象准备好后，在入口统一配置即可</li></ul></blockquote><p>结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget</span><br><span class="line">Configuration</span><br><span class="line">Provider                 &#x2F;&#x2F; 时间线服务者， 根据时间调用timelineEntry 实例更新，可以定义调用频率</span><br><span class="line">snapshot             &#x2F;&#x2F; 快照</span><br><span class="line">Timeline entry       &#x2F;&#x2F; 时间线实例，根据时间的变化获取Timeline Entry 的数据</span><br><span class="line">ViewContent              &#x2F;&#x2F; 展示的视图</span><br></pre></td></tr></table></figure><blockquote><p>省略shared共享的文件</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了api获取等代码</span></span><br><span class="line"><span class="comment">// 省略了Model对象代码</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TotalCaseCount</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ol><li>TimelineEntry 时间线数据实例</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间线入口实例</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TotalCaseEntry</span>: <span class="title">TimelineEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// widgit时间</span></span><br><span class="line">    <span class="keyword">var</span> date: <span class="type">Date</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 要展示的数据</span></span><br><span class="line">    <span class="keyword">let</span> totalCount: <span class="type">TotalCaseCount</span></span><br><span class="line">    <span class="keyword">var</span> isPlaceholder = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展模拟数据</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TotalCaseEntry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> stub: <span class="type">TotalCaseEntry</span> &#123;</span><br><span class="line">        <span class="type">TotalCaseEntry</span>(date: <span class="type">Date</span>(), totalCount: .<span class="keyword">init</span>(title: <span class="string">"Global"</span>, confirmed: <span class="number">200</span>, death: <span class="number">10</span>, recovered: <span class="number">100</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> placeholder: <span class="type">TotalCaseEntry</span> &#123;</span><br><span class="line">        <span class="type">TotalCaseEntry</span>(date: <span class="type">Date</span>(), totalCount: .<span class="keyword">init</span>(title: <span class="string">"----"</span>, confirmed: <span class="number">0</span>, death: <span class="number">0</span>, recovered: <span class="number">0</span>), isPlaceholder: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.TimelineProvider 数据调度服务</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GlobalTotalStatsTimeProvider</span>: <span class="title">TimelineProvider</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 时间线数据实例</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Entry</span> = <span class="type">TotalCaseEntry</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数据的单例对象</span></span><br><span class="line">    <span class="keyword">let</span> service = <span class="type">Covid19APIService</span>.shared    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 预览占位widget</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">placeholder</span><span class="params">(with: Context)</span></span> -&gt; <span class="type">TotalCaseEntry</span> &#123;</span><br><span class="line">        <span class="type">TotalCaseEntry</span>.placeholder</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快照配置</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">snapshot</span><span class="params">(with context: Context, completion: @escaping <span class="params">(TotalCaseEntry)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">if</span> context.isPreview &#123;</span><br><span class="line">            completion(<span class="type">TotalCaseEntry</span>.placeholder)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fetchTotalCaseStats &#123; (result) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> result &#123;</span><br><span class="line">                <span class="keyword">case</span> .success(<span class="keyword">let</span> entry):</span><br><span class="line">                    completion(entry)</span><br><span class="line">                <span class="keyword">case</span> .failure(<span class="number">_</span>):</span><br><span class="line">                    completion(<span class="type">TotalCaseEntry</span>.placeholder)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 时间线观测</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">timeline</span><span class="params">(with context: Context, completion: @escaping <span class="params">(Timeline&lt;TotalCaseEntry&gt;)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        fetchTotalCaseStats &#123; (result) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> entry):</span><br><span class="line">                <span class="keyword">let</span> timeline = <span class="type">Timeline</span>(entries: [entry], policy: .after(<span class="type">Date</span>().addingTimeInterval(<span class="number">60</span> * <span class="number">10</span>)))</span><br><span class="line">                completion(timeline)</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="number">_</span>):</span><br><span class="line">                <span class="keyword">let</span> timeline = <span class="type">Timeline</span>(entries: [<span class="type">TotalCaseEntry</span>.placeholder], policy: .after(<span class="type">Date</span>().addingTimeInterval(<span class="number">60</span> * <span class="number">2</span>)))</span><br><span class="line">                completion(timeline)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// api获取数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">fetchTotalCaseStats</span><span class="params">(completion: @escaping <span class="params">(Result&lt;TotalCaseEntry, Error&gt;)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        service.getGlobalTotalCount &#123; (result) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> result &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> stats):</span><br><span class="line">                <span class="keyword">let</span> entry = <span class="type">TotalCaseEntry</span>(date: <span class="type">Date</span>(), totalCount: .<span class="keyword">init</span>(title: <span class="string">"🌍"</span>, confirmed: stats.totalConfirmed, death: stats.totalDeaths, recovered: stats.totalRecovered))</span><br><span class="line">                completion(.success(entry))</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                completion(.failure(error))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>StatsWidgetSmall 小尺寸widget视图， 其他尺寸视图文件省略</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小尺寸widget视图</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatsWidgetSmall</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据实例</span></span><br><span class="line">    <span class="keyword">let</span> entry: <span class="type">TotalCaseEntry</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">TitleDataHeader</span>(title: entry.totalCount.title, date: entry.date)</span><br><span class="line">                .padding(.vertical, <span class="number">4</span>)</span><br><span class="line">                .padding(.horizontal)</span><br><span class="line">            <span class="type">CaseStatView</span>(text: <span class="string">"Confirmed"</span>, totalCountText: entry.totalCount.confirmedText, color: confirmedColor)</span><br><span class="line">            <span class="type">CaseStatView</span>(text: <span class="string">"Death"</span>, totalCountText: entry.totalCount.deathText, color: deathColor)</span><br><span class="line">            <span class="type">CaseStatView</span>(text: <span class="string">"Recovered"</span>, totalCountText: entry.totalCount.recoveredText, color: recoveredColor)</span><br><span class="line">            <span class="type">CaseStatView</span>(text: <span class="string">"Sick"</span>, totalCountText: entry.totalCount.sickText, color: sickColor)</span><br><span class="line">        &#125;</span><br><span class="line">        .redacted(reason: entry.isPlaceholder ? .placeholder: .<span class="keyword">init</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatsWidgetSmall_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// widget方式预览视图</span></span><br><span class="line">        <span class="type">StatsWidgetSmall</span>(entry: <span class="type">TotalCaseEntry</span>.placeholder)</span><br><span class="line">            .previewContext(<span class="type">WidgetPreviewContext</span>(family: .systemSmall))</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略了TitleDataHeader</span></span><br><span class="line"><span class="comment">// 省略了CaseStatView</span></span><br><span class="line"><span class="comment">// widget 的尺寸有3中： .systemSmall .systemMedium .systemLarge</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Widget工程入口配置</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Covid19StatsWidget</span>: <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> kind: <span class="type">String</span> = <span class="string">"Covid19StatsWidget"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置WidgetConfiguration， 注入Provider， 和 View</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: some <span class="type">WidgetConfiguration</span> &#123;</span><br><span class="line">        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">GlobalTotalStatsTimeProvider</span>()) &#123; entry <span class="keyword">in</span></span><br><span class="line">            <span class="type">StatsWidgetEntryView</span>(entry: entry)</span><br><span class="line">        &#125;</span><br><span class="line">        .configurationDisplayName(<span class="string">"My Covid19-stats"</span>)</span><br><span class="line">        .description(<span class="string">"SHow latest global lifetime stats"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Covid19StatsWidget_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">StatsWidgetEntryView</span>(entry: <span class="type">TotalCaseEntry</span>.stub)</span><br><span class="line">            .previewContext(<span class="type">WidgetPreviewContext</span>(family: .systemSmall))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">学习链接：</span><br><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;5gj0OzknhMw&amp;t&#x3D;1820s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;widget-范例创建步骤&quot;&gt;&lt;a href=&quot;#widget-范例创建步骤&quot; class=&quot;headerlink&quot; title=&quot;widget 范例创建步骤&quot;&gt;&lt;/a&gt;widget 范例创建步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;添加target widget工程&lt;/l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>修饰符 matchedGeometryEffect 使用要点</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/10/SwiftUI-matchedGeometryEffect/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/10/SwiftUI-matchedGeometryEffect/</id>
    <published>2020-08-10T15:20:32.000Z</published>
    <updated>2020-08-30T04:24:52.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>matchedGeometryEffect 是SwiftUI 第2版中一个修饰符，它可以使多个元素进行，位置，大小，等属性进行动画匹配</p></blockquote><h2 id="matchedGeometryEffect-的参数说明"><a href="#matchedGeometryEffect-的参数说明" class="headerlink" title="matchedGeometryEffect 的参数说明"></a>matchedGeometryEffect 的参数说明</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 参数介绍：</span></span><br><span class="line"><span class="comment">// id:  匹配的id</span></span><br><span class="line"><span class="comment">// in:  Namespace.ID  空间</span></span><br><span class="line"><span class="comment">// properties: 要匹配的属性</span></span><br><span class="line"><span class="comment">// anchor： 要对齐锚点，默认center</span></span><br><span class="line"><span class="comment">// isSource:  是否为匹配源，默认为true</span></span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">matchedGeometryEffect</span>&lt;ID&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    id: ID, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">in</span> namespace: Namespace.ID, </span></span></span><br><span class="line"><span class="function"><span class="params">    properties: MatchedGeometryProperties = .frame, </span></span></span><br><span class="line"><span class="function"><span class="params">    anchor: UnitPoint = .center, </span></span></span><br><span class="line"><span class="function"><span class="params">    isSource: Bool = <span class="literal">true</span>)</span></span> -&gt; some <span class="type">View</span> <span class="keyword">where</span> <span class="type">ID</span> : <span class="type">Hashable</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典小例子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExampleView2</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> nspace</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> flag: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 淡出的元素：会从本身（green正方）位置执行frame动画, </span></span><br><span class="line">            <span class="comment">// 匹配目标（blue圆）位置，并逐步执行淡出动画</span></span><br><span class="line">            <span class="keyword">if</span> flag &#123;</span><br><span class="line">                <span class="type">Rectangle</span>()</span><br><span class="line">                    .fill(<span class="type">Color</span>.green)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">"geoeffect1"</span>, <span class="keyword">in</span>: nspace)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Switch"</span>)&#123;</span><br><span class="line">                withAnimation(.easeInOut(duration: <span class="number">1</span>))&#123;</span><br><span class="line">                    flag.toggle()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="comment">// 淡入的元素： 会把目标位置的元素（blue圆）拷贝到起始要淡出的（green正方）位置，</span></span><br><span class="line">            <span class="comment">// 然后执行 frame 淡入动画</span></span><br><span class="line">            <span class="keyword">if</span> !flag&#123;</span><br><span class="line">                <span class="type">Circle</span>()</span><br><span class="line">                    .fill(<span class="type">Color</span>.blue)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">"geoeffect1"</span>, <span class="keyword">in</span>: nspace)</span><br><span class="line">                    .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">400</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">此例子： 当匹配双方的isSouce未设置则默认都为true时候：</span></span><br><span class="line"><span class="comment">1. 传入的视图，使用传出视图的几何图形作为过渡的起始大小和位置     （点击时，拷贝 蓝色圆形 到 绿正方形位置， 并淡入）</span></span><br><span class="line"><span class="comment">2. 传出的视图，使用传入视图的几何图形作为过渡的最终大小和位置     （点击时，从 绿方形 运动变化至 蓝色圆 形，并淡出）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="其他-properties-和-anchor，-isSource-参数"><a href="#其他-properties-和-anchor，-isSource-参数" class="headerlink" title="其他 properties 和 anchor， isSource 参数"></a>其他 properties 和 anchor， isSource 参数</h2><blockquote><p>栗子2： matchedGeometryEffect修饰符，在匹配时候默认采用frame 方式 center 对齐。此例子我们将对参数更改，理解它各自作用</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExampleView5</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> ns</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> matched: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="type">Triangle</span>(.down, .blue)</span><br><span class="line">                    .matchedGeometryEffect(id: matched ? <span class="string">"id1"</span> : <span class="string">"a"</span>, <span class="keyword">in</span>: ns)</span><br><span class="line">                    .frame(width: <span class="number">150</span>, height: <span class="number">150</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Triangle</span>(.<span class="keyword">right</span>, .green)</span><br><span class="line">                    <span class="comment">// isSouce 参数 本例子设为false，表示该元素的位置，大小信息，不会被另一方匹配借用</span></span><br><span class="line">                    <span class="comment">// .matchedGeometryEffect(id: matched ? "id1" : "", in: ns, isSource: false)</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// properties 参数: 本例子是 匹配 目标元素的 size 大小， 所以位置不会改变</span></span><br><span class="line">                    <span class="comment">// .matchedGeometryEffect(id: matched ? "id1" : "", in: ns, properties: .size, isSource: false)</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// anchor 参数： 本例子是用.topLeading 对齐，目标元素的.center</span></span><br><span class="line">                    .matchedGeometryEffect(id:matched ? <span class="string">"id1"</span> : <span class="string">""</span>, <span class="keyword">in</span>: ns, anchor: .topLeading, isSource: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">                    .frame(width: <span class="number">75</span>, height: <span class="number">75</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Toggle</span>(isOn: $matched.animation(.easeInOut), label: &#123; <span class="type">Text</span>(<span class="string">"Matched"</span>) &#125;).frame(width: <span class="number">140</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个组合，多个视图匹配"><a href="#多个组合，多个视图匹配" class="headerlink" title="多个组合，多个视图匹配"></a>多个组合，多个视图匹配</h2><p>将多个元素<code>Triangle</code>组合到不同的，分组<code>id</code>中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExampleView7</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> ns</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> matched = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Triangle</span>(.down, .purple)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">"id1"</span>, <span class="keyword">in</span>: ns)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Triangle</span>(.<span class="keyword">right</span>, .green)</span><br><span class="line">                    .matchedGeometryEffect(id: matched ? <span class="string">"id1"</span> : <span class="string">"unpair1"</span>, <span class="keyword">in</span>: ns, isSource: <span class="literal">false</span>)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Triangle</span>(.up, .yellow)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">"id2"</span>, <span class="keyword">in</span>: ns)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Triangle</span>(.<span class="keyword">left</span>, .red)</span><br><span class="line">                    .matchedGeometryEffect(id: matched ? <span class="string">"id2"</span> : <span class="string">"unpair2"</span>, <span class="keyword">in</span>: ns, isSource: <span class="literal">false</span>)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Triangle</span>(.down, .orange)</span><br><span class="line">                    .matchedGeometryEffect(id: matched ? <span class="string">"id2"</span> : <span class="string">"unpair3"</span>, <span class="keyword">in</span>: ns, isSource: <span class="literal">false</span>)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.gray)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Toggle</span>(isOn: $matched.animation(.easeInOut), label: &#123; <span class="type">Text</span>(<span class="string">"Matched"</span>) &#125;).frame(width: <span class="number">140</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="01.jpg" alt=""></p><h2 id="多个空间的匹配"><a href="#多个空间的匹配" class="headerlink" title="多个空间的匹配"></a>多个空间的匹配</h2><p>将多个元素<code>Triangle</code>组合匹配，到不同的空间</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExampleView8</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> empty_namespace</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> namespace1</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> namespace2</span><br><span class="line">    @<span class="type">Namespace</span> <span class="keyword">var</span> namespace3</span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> namespaceInUse = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> colors: [<span class="type">Color</span>] = [.purple, .green, .yellow, .red]</span><br><span class="line">        <span class="keyword">let</span> direction: [<span class="type">Triangle</span>.<span class="type">Direction</span>] = [.up, .down, .<span class="keyword">left</span>, .<span class="keyword">right</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="comment">// Namespace 1</span></span><br><span class="line">                <span class="type">Rectangle</span>().fill(<span class="type">Color</span>.green.opacity(<span class="number">0.2</span>)).frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">0</span>, <span class="keyword">in</span>: namespace1)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">1</span>, <span class="keyword">in</span>: namespace1)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Rectangle</span>().fill(<span class="type">Color</span>.green.opacity(<span class="number">0.2</span>)).frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">2</span>, <span class="keyword">in</span>: namespace1)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">3</span>, <span class="keyword">in</span>: namespace1)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Namespace 2</span></span><br><span class="line">                <span class="type">Rectangle</span>().fill(<span class="type">Color</span>.blue.opacity(<span class="number">0.2</span>)).frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">0</span>, <span class="keyword">in</span>: namespace2)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">2</span>, <span class="keyword">in</span>: namespace2)</span><br><span class="line"></span><br><span class="line">                <span class="type">Rectangle</span>().fill(<span class="type">Color</span>.blue.opacity(<span class="number">0.2</span>)).frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">1</span>, <span class="keyword">in</span>: namespace2)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">3</span>, <span class="keyword">in</span>: namespace2)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Namespace 3</span></span><br><span class="line">                <span class="type">Rectangle</span>().fill(<span class="type">Color</span>.red.opacity(<span class="number">0.2</span>)).frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">0</span>, <span class="keyword">in</span>: namespace3)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">1</span>, <span class="keyword">in</span>: namespace3)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">2</span>, <span class="keyword">in</span>: namespace3)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="number">3</span>, <span class="keyword">in</span>: namespace3)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">4</span>) &#123; idx <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Triangle</span>(direction[idx], colors[idx])</span><br><span class="line">                        .matchedGeometryEffect(id: idx, <span class="keyword">in</span>: activeNamespace(), isSource: <span class="literal">false</span>)</span><br><span class="line">                        .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"Match namespace1"</span>) &#123; withAnimation &#123; namespaceInUse = <span class="number">1</span> &#125;&#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"Match namespace2"</span>) &#123; withAnimation &#123; namespaceInUse = <span class="number">2</span> &#125;&#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"Match namespace3"</span>) &#123; withAnimation &#123; namespaceInUse = <span class="number">3</span> &#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Unmatch"</span>) &#123; withAnimation &#123; namespaceInUse = <span class="number">0</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">activeNamespace</span><span class="params">()</span></span> -&gt; <span class="type">Namespace</span>.<span class="type">ID</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> namespaceInUse == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> namespace1</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> namespaceInUse == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> namespace2</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> namespaceInUse == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> namespace3</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> empty_namespace</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="02.jpg" alt=""></p><blockquote><p>附件：案例中用到的<code>Triangle</code></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triangle</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> direction: <span class="type">Direction</span></span><br><span class="line">    <span class="keyword">let</span> color: <span class="type">Color</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> direction: <span class="type">Direction</span> = .down, <span class="number">_</span> color: <span class="type">Color</span> = .black) &#123;</span><br><span class="line">        <span class="keyword">self</span>.direction = direction</span><br><span class="line">        <span class="keyword">self</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TriangleShape</span>()</span><br><span class="line">            .fill(color)</span><br><span class="line">            .border(<span class="type">Color</span>.black)</span><br><span class="line">            .rotationEffect(<span class="type">Angle</span>.degrees(direction.rawValue))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TriangleShape</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">path</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> path = <span class="type">Path</span>()</span><br><span class="line">            </span><br><span class="line">            path.move(to: .zero)</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: rect.maxX, y: <span class="number">0</span>))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.midY))</span><br><span class="line">            path.closeSubpath()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Direction</span>: <span class="title">Double</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> down = <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">left</span> = <span class="number">90</span></span><br><span class="line">        <span class="keyword">case</span> up = <span class="number">180</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">right</span> = <span class="number">270</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文章学习参考资料：</p></blockquote><p><a href="https://swiftui-lab.com/matchedgeometryeffect-part1/" target="_blank" rel="noopener">https://swiftui-lab.com/matchedgeometryeffect-part1/</a></p><p><a href="https://swiftui-lab.com/matchedgeometryeffect-part2/" target="_blank" rel="noopener">https://swiftui-lab.com/matchedgeometryeffect-part2/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;matchedGeometryEffect 是SwiftUI 第2版中一个修饰符，它可以使多个元素进行，位置，大小，等属性进行动画匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;matchedGeometryEffect-的参数说明&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用Extension扩展自定义的Animation和Transition</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/09/SwiftUI-custom-animation-transition/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/09/SwiftUI-custom-animation-transition/</id>
    <published>2020-08-09T08:24:49.000Z</published>
    <updated>2020-08-30T02:53:52.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Animation-和-AnyTransition"><a href="#Animation-和-AnyTransition" class="headerlink" title="Animation 和 AnyTransition"></a>Animation 和 AnyTransition</h3><blockquote><p>在SwiftUI中已经有框架定义的<code>Animation</code>动画，和 <code>Transition</code> 过渡，调用的方式也非常简单<br>对<code>View</code>应用的修饰符即可. 如<code>.animation(.easeInOut(duration: 10))</code></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 动画</span></span><br><span class="line">.animation(.easeInOut(duration: <span class="number">10</span>))</span><br><span class="line">.animation(.interactiveSpring(response: <span class="number">0.6</span>, dampingFraction: <span class="number">0.6</span>, blendDuration: <span class="number">0.25</span>))</span><br><span class="line">.animation(.interactiveSpring())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过渡</span></span><br><span class="line">.transition(.identity)</span><br><span class="line">.transition(.scale)</span><br><span class="line">.transition(<span class="type">AnyTransition</span>.opacity)</span><br></pre></td></tr></table></figure><blockquote><p>如果想自定一些动画，或简化调用，则可以使用extension去扩展这两个结构体对象，请看下方小例子</p></blockquote><h3 id="如果要在原动画基础上，实现自定义动画"><a href="#如果要在原动画基础上，实现自定义动画" class="headerlink" title="如果要在原动画基础上，实现自定义动画"></a>如果要在原动画基础上，实现自定义动画</h3><h5 id="扩展Animation增加自定义动画"><a href="#扩展Animation增加自定义动画" class="headerlink" title="扩展Animation增加自定义动画"></a>扩展Animation增加自定义动画</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义：</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> hero: <span class="type">Animation</span> &#123;</span><br><span class="line">        debugAnimations ? debug : .interactiveSpring(response: <span class="number">0.6</span>, dampingFraction: <span class="number">0.6</span>, blendDuration: <span class="number">0.25</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> blur: <span class="type">Animation</span> &#123;</span><br><span class="line">        debugAnimations ? debug : .linear(duration: <span class="number">0.25</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> debug: <span class="type">Animation</span>&#123;</span><br><span class="line">        .easeInOut(duration: <span class="number">4.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line"><span class="comment">// with方式使用</span></span><br><span class="line">withAnimation(.hero) &#123;</span><br><span class="line">    <span class="keyword">self</span>.selectedItem = item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">withAnimation(.debug) &#123;</span><br><span class="line">    <span class="keyword">self</span>.selectedItem = item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// animation修饰符方式使用</span></span><br><span class="line">.animation(.blur)</span><br><span class="line">.animation(.debug)</span><br></pre></td></tr></table></figure><h5 id="扩展Animation增加自定义过渡效果"><a href="#扩展Animation增加自定义过渡效果" class="headerlink" title="扩展Animation增加自定义过渡效果"></a>扩展Animation增加自定义过渡效果</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义：</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AnyTransition</span> </span>&#123;</span><br><span class="line">    <span class="comment">// AnimatableModifier修饰符</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">InvisibleModifier</span>: <span class="title">AnimatableModifier</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pct: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> animatableData: <span class="type">Double</span> &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                pct</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                pct = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">                .opacity(pct == <span class="number">1.0</span> ? <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1 - 0 透明度变化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> invisible: <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="type">AnyTransition</span>.modifier(</span><br><span class="line">            active: <span class="type">InvisibleModifier</span>(pct: <span class="number">0</span>),</span><br><span class="line">            identity: <span class="type">InvisibleModifier</span>(pct: <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line">.transition(.invisible)</span><br><span class="line">.transition(<span class="type">AnyTransition</span>.invisible)</span><br></pre></td></tr></table></figure><h3 id="其实扩展-Animation-和-AnyTransition-和扩展-Color，-Font-本质是没有什么区别，哈哈😂"><a href="#其实扩展-Animation-和-AnyTransition-和扩展-Color，-Font-本质是没有什么区别，哈哈😂" class="headerlink" title="其实扩展 Animation 和 AnyTransition  和扩展 Color， Font 本质是没有什么区别，哈哈😂"></a>其实扩展 <code>Animation</code> 和 <code>AnyTransition</code>  和扩展 <code>Color</code>， <code>Font</code> 本质是没有什么区别，哈哈😂</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Animation-和-AnyTransition&quot;&gt;&lt;a href=&quot;#Animation-和-AnyTransition&quot; class=&quot;headerlink&quot; title=&quot;Animation 和 AnyTransition&quot;&gt;&lt;/a&gt;Animation 和
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何自定义@Environment变量</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/08/09/SwiftUI-Environment/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/08/09/SwiftUI-Environment/</id>
    <published>2020-08-09T07:50:51.000Z</published>
    <updated>2020-08-30T02:54:38.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于-Environment-基础"><a href="#关于-Environment-基础" class="headerlink" title="关于@Environment 基础"></a>关于@Environment 基础</h3><blockquote><p>在SwiftUI在 @Environment包装的是APP系统环境变量,可以在整个应用任意页面获取</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Environment</span>(\.colorScheme) <span class="keyword">var</span> scheme     <span class="comment">//系统当前主题模式， .dark 或 .light</span></span><br></pre></td></tr></table></figure><h3 id="如果要自定义一些全局环境的变量怎么办"><a href="#如果要自定义一些全局环境的变量怎么办" class="headerlink" title="如果要自定义一些全局环境的变量怎么办"></a>如果要自定义一些全局环境的变量怎么办</h3><blockquote><p>可以通过 <code>extension</code> 扩展 <code>EnvironmentValues</code> 和配置 <code>EnvironmentKey</code> 实现</p></blockquote><p>1.预设两个取值的key, 并设置默认值，一个可以示例获取对象，一个示例用于获取CGFloat数值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EnvironmentKey</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeroConfigKey</span>: <span class="title">EnvironmentKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> defaultValue: <span class="type">HeroConfiguration</span> = .<span class="keyword">default</span>     <span class="comment">//HeroConfiguration是一个结构体对象，此处省略实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">ModalTransitionKey</span>: <span class="title">EnvironmentKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> defaultValue: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.扩展<code>EnvironmentValues</code> 值选项，配置<code>get</code>和<code>set</code> 属性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnvironmentValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> heroConfig: <span class="type">HeroConfiguration</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>[<span class="type">HeroConfigKey</span>.<span class="keyword">self</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>[<span class="type">HeroConfigKey</span>.<span class="keyword">self</span>] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> modalTransitionPercent: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>[<span class="type">ModalTransitionKey</span>.<span class="keyword">self</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>[<span class="type">ModalTransitionKey</span>.<span class="keyword">self</span>] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Environment-获取自定义预设的全局环境变量"><a href="#使用-Environment-获取自定义预设的全局环境变量" class="headerlink" title="使用@Environment 获取自定义预设的全局环境变量"></a>使用@Environment 获取自定义预设的全局环境变量</h3><blockquote><p>和使用系统预设的的变量一致</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Environment</span>(\.modalTransitionPercent) <span class="keyword">var</span> pct: <span class="type">CGFloat</span></span><br><span class="line">@<span class="type">Environment</span>(\.heroConfig) <span class="keyword">var</span> config: <span class="type">HeroConfiguration</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// print(pct)        0</span></span><br><span class="line"><span class="comment">// print(config)     HeroConfiguration.default 对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于-Environment-基础&quot;&gt;&lt;a href=&quot;#关于-Environment-基础&quot; class=&quot;headerlink&quot; title=&quot;关于@Environment 基础&quot;&gt;&lt;/a&gt;关于@Environment 基础&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于Hashable和Equatable协议的使用，比较结构体等数据</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/07/14/SwiftUI-Hashable-Equatable/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/07/14/SwiftUI-Hashable-Equatable/</id>
    <published>2020-07-14T05:02:50.000Z</published>
    <updated>2020-08-30T02:54:45.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Equatable协议"><a href="#Equatable协议" class="headerlink" title="Equatable协议"></a>Equatable协议</h2><blockquote><p>比较基础的字符串是否相等，可以直接<code>==</code>运算符，是因为在标准库中，官方已经实现了基础数据类型的<code>Equatable</code>协议</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"Hello, playground"</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"Hello, playground"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> str1 == str2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但如果要比较两个<code>struct</code>, 必须自己实现<code>Equatable</code>协议中的<code>==</code>方法，才能比较</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> age: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Person, rhs: Person)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  lhs.name == rhs.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">19</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1 == p2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashable协议"><a href="#Hashable协议" class="headerlink" title="Hashable协议"></a>Hashable协议</h2><blockquote><p>1.如果要把一个对象作为<code>Dictionary</code>的<code>key</code>, 或着<code>Set</code>的值，那它必须继承自<code>Hashable</code>协议<br>2.<code>Hashable</code>协议是继承自<code>Equatable</code>协议的<br>3.<code>Hashable</code>协议有一个<code>hash()</code>方法,可以合并生成一个唯一的<code>hashValue</code>便于区分每条数据</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Post</span>:<span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Account</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> accountIdentifier: <span class="type">Person</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// hash方法这里生成的值，可作为字典的key，需要具有唯一性,</span></span><br><span class="line">    <span class="comment">// 在本栗子如果combine没有合并age的值当两个Person名称相同，acount1和acount2不能同时存在作为key</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(into hasher: <span class="keyword">inout</span> Hasher)</span></span> &#123;</span><br><span class="line">        hasher.combine(accountIdentifier.name)</span><br><span class="line">        hasher.combine(accountIdentifier.age)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里==方法是做account自身的比较，如果只比较name的话，account1 和 account2 将会相等， 当同时比较age时两者将不再相等</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Account, rhs: Account)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        lhs.accountIdentifier.name == rhs.accountIdentifier.name <span class="comment">// &amp;&amp; lhs.accountIdentifier.age == rhs.accountIdentifier.age</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>比较两个<code>Account</code>账户, <code>==</code>方法的不同实现，将对判等产生不同的结果</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> acount1 = <span class="type">Account</span>(accountIdentifier: <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">19</span>))</span><br><span class="line"><span class="keyword">var</span> acount2 = <span class="type">Account</span>(accountIdentifier: <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> acount1 == acount2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes acount is same"</span>)  <span class="comment">//将被输出，因为我们 == 运算只是对比了 name</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当把<code>Acount</code>作为<code>dict</code>字典的<code>key</code>时，两者的<code>hashValue</code>是不能相等的</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// account1 和 account2 可以同时作为 dict 的 key , 因为我们 Account 的 hash() 方法中，组合了 name 和 age 使得它的hashValue具有唯一性质</span></span><br><span class="line"><span class="keyword">var</span> dict = [</span><br><span class="line">    acount1: <span class="type">Post</span>(content: <span class="string">"post1"</span>),</span><br><span class="line">    acount2: <span class="type">Post</span>(content: <span class="string">"post1"</span>),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> post1 = dict[<span class="type">Account</span>(accountIdentifier: <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">19</span>)) ]</span><br><span class="line"><span class="keyword">let</span> post2 = dict[<span class="type">Account</span>(accountIdentifier: <span class="type">Person</span>(name: <span class="string">"Tang"</span>, age: <span class="number">20</span>)) ]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于post内容也是一致的，所以Yes语句将被输出</span></span><br><span class="line"><span class="keyword">if</span> post1 == post2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes post is same"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结：<code>Equatable</code> 是用于数据比较的协议，<code>Hashable</code>继承了<code>Equatable</code>。 同时它多了一个<code>hash</code>运算，可生成唯一的<code>hashValue</code>以便于在 <code>Dictionary</code>，<code>Set</code>等数据中使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Equatable协议&quot;&gt;&lt;a href=&quot;#Equatable协议&quot; class=&quot;headerlink&quot; title=&quot;Equatable协议&quot;&gt;&lt;/a&gt;Equatable协议&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;比较基础的字符串是否相等，可以直接&lt;cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用@ViewBuilder封装组件，分离组件逻辑和渲染</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/07/10/SwiftUI-ViewBuilder/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/07/10/SwiftUI-ViewBuilder/</id>
    <published>2020-07-10T09:26:45.000Z</published>
    <updated>2020-08-30T02:55:21.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewBuilder-可以做些什么？"><a href="#ViewBuilder-可以做些什么？" class="headerlink" title="@ViewBuilder 可以做些什么？"></a>@ViewBuilder 可以做些什么？</h2><blockquote><p>使用<code>@ViewBuilder</code>可以更自由的组装视图，把相同的部分统一封装，不同的部分抽离在外部进行自由定义。它能实现非常类似前端书写vue组件的slot功能。。。</p></blockquote><p> 先看一个小例子：</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当我们要个文字，或图片添加相同的圆角和背景色时，最原始的做法我们可以如下</span></span><br><span class="line"><span class="type">Text</span>(<span class="string">"Click Me ！"</span>)</span><br><span class="line">   .background(<span class="type">Color</span>.red)</span><br><span class="line">   .cornerRadius(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">"person"</span>)</span><br><span class="line">   .background(<span class="type">Color</span>.red)</span><br><span class="line">   .cornerRadius(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>其次我们也可以，扩充一个自定义修饰符，<code>ViewModifier</code> 在 <code>View</code>上实现，实现可参考下面的链接</p></blockquote><p>[链接🔗][ <a href="https://tttyyyzzz2020.github.io/2020/04/10/SwiftUI-custome-modifier/" target="_blank" rel="noopener">https://tttyyyzzz2020.github.io/2020/04/10/SwiftUI-custome-modifier/</a> ]</p><blockquote><p>除了上面的方法，我们还可以用 <code>@ViewBuilder</code> 来创建<br>相较于前者而言，可以自由的管理组件的样式，还能给它定义更多状态。如给图片和按钮添加状态从而改变颜色。</p></blockquote><p>1、创建组件，初始化是传入<code>@ViewBuilder</code>修饰的函数，该函数许返回<code>View</code>类型数据,最后在 <code>func body()</code> 方法中渲染</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">YiWrapperView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> status: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> status: <span class="type">State</span>&lt;<span class="type">Bool</span>&gt; = .<span class="keyword">init</span>(initialValue: <span class="literal">false</span>), </span><br><span class="line">        @<span class="type">ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>._status = status</span><br><span class="line">        <span class="keyword">self</span>.content = content()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .padding()</span><br><span class="line">            .background(status ? <span class="type">Color</span>.red :<span class="type">Color</span>.green)</span><br><span class="line">            .cornerRadius(<span class="number">5</span>)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                <span class="keyword">self</span>.status.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用组件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">YiWrapperView</span>(.<span class="keyword">init</span>(initialValue: <span class="literal">true</span>)) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"Click Me ！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">YiWrapperView</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">"person"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装一个数据获取层的View组件"><a href="#封装一个数据获取层的View组件" class="headerlink" title="封装一个数据获取层的View组件"></a>封装一个数据获取层的View组件</h2><blockquote><p>在下面的🌰栗子 我们把数据请求逻辑单独封装起来。<br>使用<code>ViewBuilder</code>去构建视图， 从而使得数据获取和视图渲染剥离。<br>使用者只需关心如何将数据渲染不同的视图， 而数据的获取的逻辑我们统一封装在最外包裹层</p></blockquote><p>1、下方是一个以core data 数据获取的组件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FetchResultWrapper</span>&lt;<span class="title">Object</span>, <span class="title">Content</span>&gt;: <span class="title">View</span> <span class="title">where</span> <span class="title">Object</span>: <span class="title">NSManagedObject</span>, <span class="title">Content</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: ([<span class="type">Object</span>]) -&gt; <span class="type">Content</span>   <span class="comment">//视图构建</span></span><br><span class="line">    <span class="keyword">var</span> request: <span class="type">FetchRequest</span>&lt;<span class="type">Object</span>&gt;    <span class="comment">//数据请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(</span><br><span class="line">        predicate: <span class="type">NSPredicate</span> = <span class="type">NSPredicate</span>(value: <span class="literal">true</span>),</span><br><span class="line">        sortDescriptors: [<span class="type">NSSortDescriptor</span>] = [],</span><br><span class="line">        @<span class="type">ViewBuilder</span> content: @escaping([<span class="type">Object</span>]) -&gt; <span class="type">Content</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content = content</span><br><span class="line">        <span class="keyword">self</span>.request = <span class="type">FetchRequest</span>(</span><br><span class="line">            entity: <span class="type">Object</span>.entity(),</span><br><span class="line">            sortDescriptors: sortDescriptors,</span><br><span class="line">            predicate: predicate</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.content(request.wrappedValue.<span class="built_in">map</span>(&#123;$<span class="number">0</span>&#125;))     <span class="comment">//数据传递给视图</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、组件调用方式 (注意这里core data 的代码并不完整)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取core data 数据</span></span><br><span class="line"><span class="type">FetchResultWrapper</span>(predicate: <span class="keyword">self</span>.coredataManager.notePredicate,</span><br><span class="line">                    sortDescriptors: [<span class="keyword">self</span>.coredataManager.sortDescriptor]) &#123; (data: [<span class="type">Item</span>])  <span class="keyword">in</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//在已经有了 data 数据， 可以自由渲染了...</span></span><br><span class="line">                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ViewBuilder-可以做些什么？&quot;&gt;&lt;a href=&quot;#ViewBuilder-可以做些什么？&quot; class=&quot;headerlink&quot; title=&quot;@ViewBuilder 可以做些什么？&quot;&gt;&lt;/a&gt;@ViewBuilder 可以做些什么？&lt;/h2&gt;&lt;bl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Lazy修饰符和方法</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/07/10/SwiftUI-Lazy/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/07/10/SwiftUI-Lazy/</id>
    <published>2020-07-10T02:18:43.000Z</published>
    <updated>2020-08-30T15:23:30.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在初始化对象时对于一些属性如果只在特定场景才用，或一些非常耗时耗内存的方法。我们可以采用延时初始化。优化执行速度性能</p></blockquote><h4 id="lazy-修饰符"><a href="#lazy-修饰符" class="headerlink" title="lazy 修饰符"></a>lazy 修饰符</h4><blockquote><p>lazy使用事项</p><ol><li>只能用var声明</li><li>必须指明类型</li><li>可用闭包初始化初次调用</li></ol></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">"Hello"</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"只在首次访问输出"</span>)</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有特殊处理，也可以如下使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> = <span class="string">"Hello”</span></span><br></pre></td></tr></table></figure><h4 id="lazy方法"><a href="#lazy方法" class="headerlink" title="lazy方法"></a>lazy方法</h4><blockquote><p>在swift标准库中还有一些lazy方法。可配合队列，和集合类型数据使用</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : SequenceType&gt;<span class="params">(s: S)</span></span> -&gt; <span class="type">LazySequence</span>&lt;<span class="type">S</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : RandomAccessIndexType&gt;<span class="params">(s: S)</span></span></span><br><span class="line">                -&gt; <span class="type">LazyRandomAccessCollection</span>&lt;<span class="type">S</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : BidirectionalIndexType&gt;<span class="params">(s: S)</span></span></span><br><span class="line">                -&gt; <span class="type">LazyBidirectionalCollection</span>&lt;<span class="type">S</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : ForwardIndexType&gt;<span class="params">(s: S)</span></span></span><br><span class="line">                -&gt; <span class="type">LazyForwardCollection</span>&lt;<span class="type">S</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>普通map和lazy.map调用执行区别</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通map遍历</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> result = data.<span class="built_in">map</span> &#123;</span><br><span class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 \(i)"</span>)</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"准备访问结果"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"操作后结果为 \(i)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"操作完毕"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在处理 1</span></span><br><span class="line"><span class="comment">// 正在处理 2</span></span><br><span class="line"><span class="comment">// 正在处理 3</span></span><br><span class="line"><span class="comment">// 准备访问结果</span></span><br><span class="line"><span class="comment">// 操作后结果为 2</span></span><br><span class="line"><span class="comment">// 操作后结果为 4</span></span><br><span class="line"><span class="comment">// 操作后结果为 6</span></span><br><span class="line"><span class="comment">// 操作完毕”</span></span><br></pre></td></tr></table></figure><blockquote><p>使用lazy修饰后，执行的顺序时如下</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加了lazy.map的遍历</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> result = data.<span class="built_in">lazy</span>.<span class="built_in">map</span> &#123;</span><br><span class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 \(i)"</span>)</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"准备访问结果"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"操作后结果为 \(i)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"操作完毕"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备访问结果</span></span><br><span class="line"><span class="comment">// 正在处理 1</span></span><br><span class="line"><span class="comment">// 操作后结果为 2</span></span><br><span class="line"><span class="comment">// 正在处理 2</span></span><br><span class="line"><span class="comment">// 操作后结果为 4</span></span><br><span class="line"><span class="comment">// 正在处理 3</span></span><br><span class="line"><span class="comment">// 操作后结果为 6</span></span><br><span class="line"><span class="comment">// 操作完毕”</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在初始化对象时对于一些属性如果只在特定场景才用，或一些非常耗时耗内存的方法。我们可以采用延时初始化。优化执行速度性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;lazy-修饰符&quot;&gt;&lt;a href=&quot;#lazy-修饰符&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="SwiftUI, Swift" scheme="http://tttyyyzzz2020.ghthub.io/tags/SwiftUI-Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用ToggleStyle自定义Toggle组件的样式</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/06/12/SwiftUI-CustomToogleStyle/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/06/12/SwiftUI-CustomToogleStyle/</id>
    <published>2020-06-12T15:40:59.000Z</published>
    <updated>2020-08-30T04:25:59.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文章内容主要学习如何通过 <code>ButtonStyle，ToggleStyle，TextFieldStyle</code> 等协议的<code>func makeBody()</code>方法，配置组件的样式.</p></blockquote><h2 id="SwiftUI框架默认提供的组件样式"><a href="#SwiftUI框架默认提供的组件样式" class="headerlink" title="SwiftUI框架默认提供的组件样式"></a>SwiftUI框架默认提供的组件样式</h2><blockquote><p>在SwiftUI中为适配不同的设备，及交互场景，框架为很多交互提供了一些默认的自定义样式。</p></blockquote><p>1、如<code>Button</code> 组件有如下默认样式，使用也非常简单只要应用对应的修饰符即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 默认样式</span></span><br><span class="line"><span class="type">BorderedButtonStyle</span></span><br><span class="line"><span class="type">BorderlessButtonStyle</span></span><br><span class="line"><span class="type">DefaultButtonStyle</span></span><br><span class="line"><span class="type">LinkButtonStyle</span></span><br><span class="line"><span class="type">PlainButtonStyle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="type">Button</span>(action: &#123;</span><br><span class="line">                </span><br><span class="line">&#125;) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"Button"</span>)</span><br><span class="line">&#125;</span><br><span class="line">.buttonStyle(<span class="type">PlainButtonStyle</span>())</span><br></pre></td></tr></table></figure><p>2、其<code>Toggle</code>组件也有如下样式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 默认样式</span></span><br><span class="line"><span class="type">CheckboxToggleStyle</span>      </span><br><span class="line"><span class="type">DefaultToggleStyle</span></span><br><span class="line"><span class="type">SwitchToggleStyle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="type">Toggle</span>(isOn: $checked) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">"是否打开"</span>)</span><br><span class="line">&#125;</span><br><span class="line">.toggleStyle(<span class="type">SwitchToggleStyle</span>())</span><br></pre></td></tr></table></figure><blockquote><p>当这些默认的样式，不符合我们的需求时候，或改样式在该平台设备中不适用是就需要我们去自己定义，下面以Toogle组件为例。</p></blockquote><h2 id="自定义Toggle的样式"><a href="#自定义Toggle的样式" class="headerlink" title="自定义Toggle的样式"></a>自定义Toggle的样式</h2><p>1、创建结构体，继承自<code>ToggleStyle</code>， 然后实现<code>func makeBody()</code>方法, 其中的<code>configuration</code> 就是相关一些组件状态配置项</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">configuration.label  <span class="comment">//是标签文字</span></span><br><span class="line">configuration.isOn   <span class="comment">//是选中状态</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CustomToggleStyle</span>: <span class="title">ToggleStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">CGFloat</span> = <span class="number">40</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeBody</span><span class="params">(configuration: Configuration)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            configuration.label</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                configuration.isOn.toggle()</span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="keyword">if</span> configuration.isOn &#123;</span><br><span class="line">                    <span class="type">ZStack</span>&#123;</span><br><span class="line">                        <span class="type">Circle</span>()</span><br><span class="line">                            .frame(width: size, height: size, alignment: .center)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">                        <span class="type">Image</span>(systemName: <span class="string">"power"</span>)</span><br><span class="line">                            .resizable()</span><br><span class="line">                            .frame(width: <span class="number">20</span>, height: <span class="number">20</span>, alignment: .center)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>.orange)</span><br><span class="line">                    &#125;.shadow(color: <span class="type">Color</span>.gray, radius: <span class="number">5</span>, x: <span class="number">2</span>, y: <span class="number">2</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">ZStack</span>&#123;</span><br><span class="line">                        <span class="type">Circle</span>()</span><br><span class="line">                            .fill(<span class="type">Color</span>.gray)</span><br><span class="line">                            .frame(width: size, height: size,alignment: .center)</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">Image</span>(systemName: <span class="string">"power"</span>)</span><br><span class="line">                            .resizable()</span><br><span class="line">                            .frame(width: <span class="number">20</span>, height: <span class="number">20</span>, alignment: .center)</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    .shadow(color: <span class="type">Color</span>.gray, radius: <span class="number">5</span>, x: <span class="number">2</span>, y: <span class="number">2</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、应用自定义的样式,在本栗子中只需添加<code>.toggleStyle(CustomToggleStyle())</code>修饰符即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> checked: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="comment">// 原始样式</span></span><br><span class="line">            <span class="type">Toggle</span>(isOn: $checked) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"请点击 \(checked ? "</span><span class="type">ON</span><span class="string">" : "</span><span class="type">OFF</span><span class="string">")"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义的toggle样式</span></span><br><span class="line">            <span class="type">Toggle</span>(isOn: $checked) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"请点击 \(checked ? "</span><span class="type">ON</span><span class="string">" : "</span><span class="type">OFF</span><span class="string">")"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .toggleStyle(<span class="type">CustomToggleStyle</span>())  </span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .background(<span class="type">Color</span>.gray.opacity(<span class="number">0.2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、原始样式与自定样式效果图</p><p><img src="custome_toggle_off.jpg" alt=""></p><p><img src="custome_toggle_on.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文章内容主要学习如何通过 &lt;code&gt;ButtonStyle，ToggleStyle，TextFieldStyle&lt;/code&gt; 等协议的&lt;code&gt;func makeBody()&lt;/code&gt;方法，配置组件的样式.&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用PreviewProvider控制预览效果</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/05/10/SwiftUI-PreviewProvider/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/05/10/SwiftUI-PreviewProvider/</id>
    <published>2020-05-10T14:42:12.000Z</published>
    <updated>2020-08-30T04:24:17.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本例主要演示如何在SiwftUI 实现不同颜色主题，不同设备，及尺寸的实时预览</p></blockquote><p>1、创建一个基础的ContentView</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前环境的颜色模式</span></span><br><span class="line">    @<span class="type">Environment</span>(\.colorScheme) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            (colorScheme == .light ?  <span class="type">Color</span>.white : <span class="type">Color</span>.black)</span><br><span class="line">                .edgesIgnoringSafeArea(.all)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"ContentView"</span>)</span><br><span class="line">                .foregroundColor(.primary)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建一个预览的previews</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 主题颜色</span></span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environment(\.colorScheme, .light)</span><br><span class="line">            </span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .environment(\.colorScheme, .dark)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 预览的设备</span></span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .previewDevice(<span class="string">"iPhone 8"</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 布局尺寸</span></span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .previewLayout(.fixed(width: <span class="number">100</span>, height: <span class="number">100</span>))</span><br><span class="line">            </span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">                .previewLayout(.sizeThatFits)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>.environment(\.colorScheme, .dark)</code> 预设颜色模式<br><img src="01.jpg" alt=""><br>通过<code>.previewDevice(&quot;iPhone 8&quot;)</code> 预设设备<br>通过<code>.previewLayout(.sizeThatFits)</code> 预设尺寸<br><img src="02.jpg" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本例主要演示如何在SiwftUI 实现不同颜色主题，不同设备，及尺寸的实时预览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、创建一个基础的ContentView&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用ViewModifier复用组件样式</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/04/10/SwiftUI-custome-modifier/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/04/10/SwiftUI-custome-modifier/</id>
    <published>2020-04-10T07:18:43.000Z</published>
    <updated>2020-08-30T02:53:57.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>1、首先创建自定义modifer <code>CustomTextBorder</code>， 需要让结构提继承 <code>ViewModifier</code> 协议，再实现协议中的<code>func body()</code>方法，其中的<code>content</code> 就是view本身，我们可以在content上面应用系统的提供的modifier如<code>.font()</code>, <code>.padding()</code>等来装饰我们的组件…</p><p>这样我么就创建了一个简易的自定义修饰符</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 继承viewModifier</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CustomTextBorder</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 编写body体代码</span></span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">            .font(.largeTitle)</span><br><span class="line">            .padding()</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">15</span>)</span><br><span class="line">                    .stroke(lineWidth: <span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line">            .foregroundColor(.blue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 使用自定义modifier很简单，直接在调用<code>.modifier()</code> 传入我们自定义的 <code>CustomTextBorder()</code> 就可以了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"SwiftUI Tutorials"</span>)</span><br><span class="line">            .modifier(<span class="type">CustomTextBorder</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 但更好的方式，是我们通常会将自定义modifier 扩展到 <code>View</code> 上 ，使得调用的方式更加简洁</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">customTextBorder</span><span class="params">()</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.modifier(<span class="type">CustomTextBorder</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、后续应用方式就可以如下调用了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Text</span>(<span class="string">"SwiftUI Tutorials"</span>)</span><br><span class="line">    .customTextBorder()</span><br></pre></td></tr></table></figure><blockquote><p>最后我们通过一个自定义按钮的栗子来作为示范。。。。🌰</p></blockquote><h3 id="示例：Modifier-自定义按钮的样式"><a href="#示例：Modifier-自定义按钮的样式" class="headerlink" title="示例：Modifier 自定义按钮的样式"></a>示例：Modifier 自定义按钮的样式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Continue"</span>)</span><br><span class="line">                    .modifier(<span class="type">CustomeButtonModifer</span>())</span><br><span class="line">                </span><br><span class="line">                <span class="type">Text</span>(<span class="string">"MoreDetail"</span>)</span><br><span class="line">                    .modifier(<span class="type">CustomeButtonModifer</span>(backgroundColor: .green))</span><br><span class="line">                </span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cancel"</span>)</span><br><span class="line">                    .modifier(<span class="type">CustomeButtonModifer</span>(backgroundColor: .red, size: <span class="number">20</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CustomeButtonModifer</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> backgroundColor: <span class="type">Color</span> = <span class="type">Color</span>.blue</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> size: <span class="type">CGFloat</span> = <span class="number">16</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span><span class="params">(content: Content)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">            .font(.system(size: <span class="keyword">self</span>.size ))</span><br><span class="line">            .padding(.vertical,<span class="number">5</span>)</span><br><span class="line">            .padding(.horizontal,<span class="number">14</span>)</span><br><span class="line">            .background(<span class="keyword">self</span>.backgroundColor)</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5</span>)</span><br><span class="line">                    .strokeBorder(style: <span class="type">StrokeStyle</span>(lineWidth:<span class="number">1</span>))</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>(.sRGB, red: <span class="number">0.1</span>, green: <span class="number">0.1</span>, blue: <span class="number">0.1</span>, opacity: <span class="number">1</span>)))</span><br><span class="line">            .cornerRadius(<span class="number">5</span>)</span><br><span class="line">            .shadow(radius: <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按钮效果如图：</p><img src="2020/04/10/SwiftUI-custome-modifier/01.jpg" class=""><blockquote><p>更多参考资料：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;7sosLx-wzBE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何实现&quot;&gt;&lt;a href=&quot;#如何实现&quot; class=&quot;headerlink&quot; title=&quot;如何实现&quot;&gt;&lt;/a&gt;如何实现&lt;/h3&gt;&lt;p&gt;1、首先创建自定义modifer &lt;code&gt;CustomTextBorder&lt;/code&gt;， 需要让结构提继承 &lt;code
      
    
    </summary>
    
    
    
      <category term="SwiftUI, Swift" scheme="http://tttyyyzzz2020.ghthub.io/tags/SwiftUI-Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用@PropertyWrapper创建自定义属性包装器</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/03/14/SwiftUI-PropertyWrapper/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/03/14/SwiftUI-PropertyWrapper/</id>
    <published>2020-03-14T10:06:37.000Z</published>
    <updated>2020-08-30T02:55:09.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PropertyWrapper的简述"><a href="#PropertyWrapper的简述" class="headerlink" title="@PropertyWrapper的简述"></a>@PropertyWrapper的简述</h2><blockquote><p><code>@PropertyWrapper</code>的主要作用，是可以对在原始的属性变量，添加一个分离层，使得对属性的获取和设置更细微自由， 从而移除一些重复或类似的代码。</p></blockquote><p> 在swiftUI中，已经有很多定义好的包装器了。</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> @<span class="type">State</span>.</span><br><span class="line"> <span class="comment">//可以将属性绑定到view视图，实现与界面实时响应</span></span><br><span class="line"> @<span class="type">Binding</span>.</span><br><span class="line"><span class="comment">//可以将父级的属性通过$传输绑定到子级</span></span><br><span class="line"> @<span class="type">ObservedObject</span>.</span><br><span class="line"><span class="comment">//和@State类同，但它绑定的值是需要继承自ObservableObject协议，且必须为类的方式实现，其中@Publisehd 修饰的属性将会与view视图同步响应</span></span><br><span class="line"> @<span class="type">Published</span>.</span><br><span class="line"><span class="comment">//定义在ObservableObject的类中，它包装的属性，在值变化的时候就会调用objectWillChange方法发出通知</span></span><br><span class="line"> @<span class="type">EnvironmentObject</span>.</span><br><span class="line"><span class="comment">//与 @ObservedObject相似，但它可以使得多个视图之间共享数据，而无需通过属性逐级传递</span></span><br><span class="line"> @<span class="type">Environment</span>.</span><br><span class="line"><span class="comment">//可以注入系统本省的环紧信息，如设备信息，主题色，布局，视图尺寸</span></span><br></pre></td></tr></table></figure><p>除了使用系统提供的包转器，我们也可以自行定义属性包装器。</p><h2 id="自定义一个属性包装器"><a href="#自定义一个属性包装器" class="headerlink" title="自定义一个属性包装器"></a>自定义一个属性包装器</h2><p> 主要的步骤如下</p><p> 1.用<code>@propertyWrapper</code>修饰一个<code>struct,class</code>或<code>enum</code><br> 2.定义一个<code>wrappedValue</code>属性并实现它的<code>getter</code>和<code>setter</code>方法，完成我们想要的逻辑<br> 3.还可以自行定义一个初始化方法，来对<code>wrappedValue</code>进行初始化设置<br> 4.也可以创建一个可选的<code>projectedValue</code>属性映射， 如果要获取它关联的值需要使用$符号<br> 5.使用属性包装的语法是加上<code>@</code>符号接上包装器名称</p><h4 id="栗子1-转大写的包装器-Uppercased"><a href="#栗子1-转大写的包装器-Uppercased" class="headerlink" title="栗子1: 转大写的包装器@Uppercased"></a>栗子1: 转大写的包装器<code>@Uppercased</code></h4><blockquote><p>创建一个<code>@Uppercased</code>的包装器， 功能是将存的值转为大写</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Uppercased</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; text.uppercased() &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; text = newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(wrappedValue: <span class="type">String</span>)  &#123;</span><br><span class="line">        <span class="keyword">self</span>.text = wrappedValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    @<span class="type">Uppercased</span> <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>(username: <span class="string">"alfianlo"</span>)</span><br><span class="line"><span class="built_in">print</span>(user.username) <span class="comment">// ALFIANLO</span></span><br></pre></td></tr></table></figure><p>代码说明：</p><blockquote><ol><li>在<code>@Uppercased</code>包装器中真正存值的是<code>text</code>属性</li><li>而我们访问和操作的都是<code>wrappedValue</code>， 在获取时候会将<code>text</code>的值转大写后返回</li><li>在包装器初始化时候我们会设置text的值</li><li>在User中使用<code>@Uppercased</code>包装了<code>username</code>,所以<code>username</code>的值在获取时候就会转为大写</li></ol></blockquote><h4 id="栗子2-限定数值大小的包装器-Ranged"><a href="#栗子2-限定数值大小的包装器-Ranged" class="headerlink" title="栗子2: 限定数值大小的包装器@Ranged"></a>栗子2: 限定数值大小的包装器<code>@Ranged</code></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ranged</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> minimum: <span class="type">T</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> maximum: <span class="type">T</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; value &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> newValue &gt; maximum &#123;</span><br><span class="line">                value = maximum</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> newValue &lt; minimum &#123;</span><br><span class="line">                value = minimum</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(wrappedValue: <span class="type">T</span>, minimum: <span class="type">T</span>, maximum: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.minimum = minimum</span><br><span class="line">        <span class="keyword">self</span>.maximum = maximum</span><br><span class="line">        <span class="keyword">self</span>.value = wrappedValue</span><br><span class="line">        <span class="keyword">self</span>.wrappedValue = wrappedValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Form</span> </span>&#123;</span><br><span class="line">    @<span class="type">Ranged</span>(minimum: <span class="number">17</span>, maximum: <span class="number">65</span>) <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> form = <span class="type">Form</span>()</span><br><span class="line">form.age = <span class="number">100</span> <span class="comment">// 65</span></span><br><span class="line">form.age = <span class="number">2</span> <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><p>代码说明：</p><blockquote><p>1.<code>@Ranged</code>包装器的功能是限定属性取值的最大和最小值。<br>2.包装器的<code>init</code>方法接收了2个参数，这样在使用时就可以灵活控制取值的范围。</p></blockquote><h4 id="栗子3-包装器值的映射"><a href="#栗子3-包装器值的映射" class="headerlink" title="栗子3: 包装器值的映射"></a>栗子3: 包装器值的映射</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ISO8601DateFormatted</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">let</span> formatter = <span class="type">ISO8601DateFormatter</span>()</span><br><span class="line">    <span class="keyword">var</span> projectedValue: <span class="type">String</span> &#123; <span class="type">ISO8601DateFormatted</span>.formatter.string(from: wrappedValue) &#125;</span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Form</span> </span>&#123;</span><br><span class="line">    @<span class="type">ISO8601DateFormatted</span> <span class="keyword">var</span> lastLoginAt: <span class="type">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="type">Form</span>(lastLoginAt: <span class="type">Date</span>())</span><br><span class="line"><span class="built_in">print</span>(user.$lastLoginAt) <span class="comment">// "2020-07-11T10:54:42Z"</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的的包装器中我们添加加的<code>projectedValue</code>作为映射, 当需要访问<code>wrappedValue</code>可以通过<code>$</code>加上属性名的方式访问处理后的值， 在这个的栗子我们在读取<code>warppedValue</code>存储的日期时后，都会经过<code>ISO8601DateFormatter</code>的格式化处理</p></blockquote><h4 id="栗子4-本地存储包装器-UserDefault"><a href="#栗子4-本地存储包装器-UserDefault" class="headerlink" title="栗子4: 本地存储包装器@UserDefault"></a>栗子4: 本地存储包装器<code>@UserDefault</code></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefault</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> initialValue: <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(newValue, forKey: key) &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="type">UserDefaults</span>.standard.object(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? initialValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UserPreferences</span> </span>&#123;</span><br><span class="line">    @<span class="type">UserDefault</span>(key: <span class="string">"isCheatModeEnabled"</span>, initialValue: <span class="literal">false</span>) <span class="keyword">static</span> <span class="keyword">var</span> isCheatModeEnabled: <span class="type">Bool</span></span><br><span class="line">    @<span class="type">UserDefault</span>(key: <span class="string">"highestScore"</span>, initialValue: <span class="number">10000</span>) <span class="keyword">static</span> <span class="keyword">var</span> highestScore: <span class="type">Int</span></span><br><span class="line">    @<span class="type">UserDefault</span>(key: <span class="string">"nickname"</span>, initialValue: <span class="string">"cloudstrife97"</span>) <span class="keyword">static</span> <span class="keyword">var</span> nickname: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">UserPreferences</span>.isCheatModeEnabled = <span class="literal">true</span></span><br><span class="line"><span class="type">UserPreferences</span>.highestScore = <span class="number">25000</span></span><br><span class="line"><span class="type">UserPreferences</span>.nickname = <span class="string">"squallleonhart"</span></span><br></pre></td></tr></table></figure><blockquote><p>最后这个栗子， 是一个使用属性包装器简化不同类型数据本地存储的代码。使用<code>@UserDefault</code>修饰过的属性，在获取和设置时都会同步保存在本地存储中。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PropertyWrapper的简述&quot;&gt;&lt;a href=&quot;#PropertyWrapper的简述&quot; class=&quot;headerlink&quot; title=&quot;@PropertyWrapper的简述&quot;&gt;&lt;/a&gt;@PropertyWrapper的简述&lt;/h2&gt;&lt;blockq
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用@autoclosure 自动闭包，简化函数调用的语法</title>
    <link href="http://tttyyyzzz2020.ghthub.io/2020/02/12/SwiftUI-autoclosures/"/>
    <id>http://tttyyyzzz2020.ghthub.io/2020/02/12/SwiftUI-autoclosures/</id>
    <published>2020-02-12T04:25:56.000Z</published>
    <updated>2020-08-30T02:53:07.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="autoclosure主要用处"><a href="#autoclosure主要用处" class="headerlink" title="@autoclosure主要用处"></a>@autoclosure主要用处</h2><blockquote></blockquote><p>1、<code>@autoclosure</code> 自动闭包，主要的作用是可以简化书写的语法。<br>2、<code>@autoclosure</code> 修饰的闭包函数，可以直接以参数调用自动展开，而不再需要显示的创建闭包。<br>3、<code>@autoclosure</code> 修饰的闭包只能是参数，但其本身是不能带有参数的。</p><blockquote><p>普通闭包参数</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logIftrue</span><span class="params">(<span class="number">_</span> predicate:<span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> predicate() &#123;</span><br><span class="line">        <span class="built_in">print</span>(#function)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logIftrue&#123; <span class="number">1</span> &lt; <span class="number">2</span> &#125;   <span class="comment">//显示调用方式</span></span><br></pre></td></tr></table></figure><blockquote><p><code>@autoclosure</code>修饰的闭包参数</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logIfTrueWithAutoclosure</span><span class="params">(<span class="number">_</span> predicate: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> predicate() &#123;</span><br><span class="line">        <span class="built_in">print</span>(#function)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logIfTrueWithAutoclosure( <span class="number">1</span> &lt; <span class="number">2</span> )   <span class="comment">//以参数调用方式</span></span><br></pre></td></tr></table></figure><blockquote><p>在这<code>logIfTrueWithAutoclosure</code>函数中，参数<code>predicate</code>本是一个闭包函数，但现在我毋需显示创建闭包体。可以只书写函数体表达式或者返回值，只需确保类型为<code>Bool</code>即可</p></blockquote><h2 id="Swift标准库中-autoclosure-应用"><a href="#Swift标准库中-autoclosure-应用" class="headerlink" title="Swift标准库中 @autoclosure 应用"></a>Swift标准库中 @autoclosure 应用</h2><blockquote><p>Swift中的闭包具有延时调用的特性，也就是说在需要求值时才运算,所以我们可以看下??运算符的实现，它其中的 <code>defaultValue</code> 参数只在第一个参数<code>nil</code>才进行运算求值。其次用了<code>@autoclosure</code>修饰，使得可以隐式调用闭包获取值，书写语法也变得更为简洁  <code>a ?? 1</code></p></blockquote><pre><code class="swift"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> ?? &lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>)    <span class="keyword">rethrows</span> -&gt; <span class="type">T</span> {        <span class="keyword">switch</span> <span class="keyword">optional</span> {        <span class="keyword">case</span> .some(<span class="keyword">let</span> value):            <span class="keyword">return</span> value        <span class="keyword">case</span> .<span class="keyword">none</span>:            <span class="keyword">return</span> <span class="keyword">try</span> defaultValue()        }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;autoclosure主要用处&quot;&gt;&lt;a href=&quot;#autoclosure主要用处&quot; class=&quot;headerlink&quot; title=&quot;@autoclosure主要用处&quot;&gt;&lt;/a&gt;@autoclosure主要用处&lt;/h2&gt;&lt;blockquote&gt;
&lt;/bloc
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
